{
  "title": "Synthesis Toolkit (STK) UGens",
  "groups": [
    {
      "name": "JCRev",
      "description": "John Chowning's reverberator class. This class is derived from the CLM NRev function, which is based on the use of networks of simple allpass and comb delay filters. This particular arrangement consists of 6 comb filters in parallel, followed by 3 allpass filters, a lowpass filter, and another allpass in series, followed by two allpass filters in parallel with corresponding right and left outputs. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/effects/reverb.ck",
        "https://chuck.stanford.edu/doc/examples/otf_06.ck",
        "https://chuck.stanford.edu/doc/examples/otf_07.ck"
      ],
      "constructors": [
        {
          "constructor": "JCRev",
          "arguments": [],
          "description": "Default constructor for JCRev."
        }
      ],
      "member functions": [
        {
          "member function": "mix",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set mix level."
        },
        {
          "member function": "mix",
          "return type": "float",
          "arguments": [],
          "description": "Get mix level."
        }
      ]
    },
    {
      "name": "NRev",
      "description": "CCRMA's NRev reverberator class. This class is derived from the CLM NRev function, which is based on the use of networks of simple allpass and comb delay filters. This particular arrangement consists of 6 comb filters in parallel, followed by 3 allpass filters, a lowpass filter, and another allpass in series, followed by two allpass filters in parallel with corresponding rightand left outputs. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/effects/reverb.ck",
        "https://chuck.stanford.edu/doc/examples/stk/krstlchr-algo7.ck",
        "https://chuck.stanford.edu/doc/examples/deep/thx.ck"
      ],
      "constructors": [
        {
          "constructor": "NRev",
          "arguments": [],
          "description": "Default constructor for NRev."
        }
      ],
      "member functions": [
        {
          "member function": "mix",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set mix level."
        },
        {
          "member function": "mix",
          "return type": "float",
          "arguments": [],
          "description": "Get mix level."
        }
      ]
    },
    {
      "name": "PRCRev",
      "description": "Perry's simple reverberator class. This class is based on some of the famous Stanford/CCRMA reverbs (NRev, KipRev), which were based on the Chowning/Moorer/Schroeder reverberators using networks of simple allpass and comb delay filters. This class implements two series allpass units and two parallel comb filters. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/effects/reverb.ck"
      ],
      "constructors": [
        {
          "constructor": "PRCRev",
          "arguments": [],
          "description": "Default constructor for PRCRev."
        }
      ],
      "member functions": [
        {
          "member function": "mix",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set mix level."
        },
        {
          "member function": "mix",
          "return type": "float",
          "arguments": [],
          "description": "Get mix level."
        }
      ]
    },
    {
      "name": "Chorus",
      "description": "A chorus effect. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/effects/chorus.ck"
      ],
      "constructors": [
        {
          "constructor": "Chorus",
          "arguments": [],
          "description": "Default constructor for Chorus."
        }
      ],
      "member functions": [
        {
          "member function": "baseDelay",
          "return type": "dur",
          "arguments": [
            {
              "type": "dur",
              "name": "value"
            }
          ],
          "description": "Set base delay."
        },
        {
          "member function": "baseDelay",
          "return type": "dur",
          "arguments": [],
          "description": "Get base delay."
        },
        {
          "member function": "max",
          "return type": "void",
          "arguments": [
            {
              "type": "dur",
              "name": "baseDelay"
            },
            {
              "type": "float",
              "name": "modDepth"
            }
          ],
          "description": ""
        },
        {
          "member function": "mix",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set effect mix."
        },
        {
          "member function": "mix",
          "return type": "float",
          "arguments": [],
          "description": "Get effect mix."
        },
        {
          "member function": "modDepth",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set modulation depth."
        },
        {
          "member function": "modDepth",
          "return type": "float",
          "arguments": [],
          "description": "Get modulation depth."
        },
        {
          "member function": "modFreq",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set modulation frequency."
        },
        {
          "member function": "modFreq",
          "return type": "float",
          "arguments": [],
          "description": "Get modulation frequency."
        }
      ]
    },
    {
      "name": "Modulate",
      "description": "This class combines random and periodic modulations to give a nice, natural human modulation function. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/stk/modulate.ck"
      ],
      "constructors": [
        {
          "constructor": "Modulate",
          "arguments": [],
          "description": "Default constructor for Modulate."
        }
      ],
      "member functions": [
        {
          "member function": "randomGain",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set gain for random contribution."
        },
        {
          "member function": "randomGain",
          "return type": "float",
          "arguments": [],
          "description": "Get gain for random contribution."
        },
        {
          "member function": "vibratoGain",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set gain for vibrato."
        },
        {
          "member function": "vibratoGain",
          "return type": "float",
          "arguments": [],
          "description": "Get gain for vibrato."
        },
        {
          "member function": "vibratoRate",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set rate for vibrato."
        },
        {
          "member function": "vibratoRate",
          "return type": "float",
          "arguments": [],
          "description": "Get rate for vibrato."
        }
      ]
    },
    {
      "name": "PitShift",
      "description": "This class implements a simple pitch shifter using delay lines. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/effects/pitch-shift.ck"
      ],
      "constructors": [
        {
          "constructor": "PitShift",
          "arguments": [],
          "description": "Default constructor for PitShift."
        }
      ],
      "member functions": [
        {
          "member function": "effectMix",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set effect mix level."
        },
        {
          "member function": "effectMix",
          "return type": "float",
          "arguments": [],
          "description": "Get effect mix level."
        },
        {
          "member function": "mix",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set mix level."
        },
        {
          "member function": "mix",
          "return type": "float",
          "arguments": [],
          "description": "Get mix level."
        },
        {
          "member function": "shift",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set degree of pitch shifting."
        },
        {
          "member function": "shift",
          "return type": "float",
          "arguments": [],
          "description": "Get degree of pitch shifting."
        }
      ]
    },
    {
      "name": "SubNoise",
      "description": "Generates a new random number every 'rate' ticks using the C `rand()` function. The quality of the r`and()` function varies from one OS to another. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/stk/subnoise-control.ck",
        "https://chuck.stanford.edu/doc/examples/stk/subnoise-audio.ck"
      ],
      "constructors": [
        {
          "constructor": "SubNoise",
          "arguments": [],
          "description": "Default constructor for SubNoise."
        }
      ],
      "member functions": [
        {
          "member function": "rate",
          "return type": "int",
          "arguments": [
            {
              "type": "int",
              "name": "value"
            }
          ],
          "description": "Set subsampling rate."
        },
        {
          "member function": "rate",
          "return type": "int",
          "arguments": [],
          "description": "Get subsampling rate."
        }
      ]
    },
    {
      "name": "BLT",
      "description": "Super-class for band-limited oscillators.",
      "inherits": ["UGen", "Object"],
      "constructors": [
        {
          "constructor": "BLT",
          "arguments": [],
          "description": "Default constructor for BLT."
        }
      ],
      "member functions": [
        {
          "member function": "freq",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set frequency."
        },
        {
          "member function": "freq",
          "return type": "float",
          "arguments": [],
          "description": "Set frequency."
        },
        {
          "member function": "harmonics",
          "return type": "int",
          "arguments": [
            {
              "type": "int",
              "name": "value"
            }
          ],
          "description": "Set harmonics."
        },
        {
          "member function": "harmonics",
          "return type": "int",
          "arguments": [],
          "description": "Get harmonics."
        },
        {
          "member function": "phase",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set phase."
        },
        {
          "member function": "phase",
          "return type": "float",
          "arguments": [],
          "description": "Get phase."
        }
      ]
    },
    {
      "name": "Blit",
      "description": "This class generates a band-limited impulse train using a closed-form algorithm reported by Stilson and Smith in 'Alias-Free Digital Synthesis of Classic Analog Waveforms', 1996. The user can specify both the fundamental frequency of the impulse train and the number of harmonics contained in the resulting signal. The signal is normalized so that the peak value is +/-1.0. If `nHarmonics` is 0, then the signal will contain all harmonics up to half the sample rate. Note, however, that this setting may produce aliasing in the signal when the frequency is changing (no automatic modification of the number of harmonics is performed by the `setFrequency()` function). Original code by Robin Davies, 2005. Revisions by Gary Scavone for STK, 2005.",
      "inherits": ["BLT", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/basic/blit.ck",
        "https://chuck.stanford.edu/doc/examples/basic/blit2.ck",
        "https://chuck.stanford.edu/doc/examples/basic/foo2.ck"
      ],
      "constructors": [
        {
          "constructor": "Blit",
          "arguments": [],
          "description": "Default constructor for Blit."
        }
      ]
    },
    {
      "name": "BlitSaw",
      "description": "This class generates a band-limited sawtooth waveform using a closed-form algorithm reported by Stilson and Smith in 'Alias-Free Digital Synthesis of Classic Analog Waveforms', 1996. The user can specify both the fundamental frequency of the sawtooth and the number of harmonics contained in the resulting signal. If `nHarmonics` is 0, then the signal will contain all harmonics up to half the sample rate. Note, however, that this setting may produce aliasing in the signal when the frequency is changing (no automatic modification of the number of harmonics is performed by the `setFrequency()` function). Based on initial code of Robin Davies, 2005. Modified algorithm code by Gary Scavone, 2005.",
      "inherits": ["BLT", "UGen", "Object"],
      "constructors": [
        {
          "constructor": "BlitSaw",
          "arguments": [],
          "description": "Default constructor for BlitSaw."
        }
      ]
    },
    {
      "name": "BlitSquare",
      "description": "This class generates a band-limited square wave signal. It is derived in part from the approach reported by Stilson and Smith in 'Alias-Free Digital Synthesis of Classic Analog Waveforms', 1996. The algorithm implemented in this class uses a SincM function with an even M value to achieve a bipolar bandlimited impulse train. This signal is then integrated to achieve a square waveform. The integration process has an associated DC offset but that is subtracted off the output signal. The user can specify both the fundamental frequency of the waveform and the number of harmonics contained in the resulting signal. If `nHarmonics` is 0, then the signal will contain all harmonics up to half the sample rate. Note, however, that this setting may produce aliasing in the signal when the frequency is changing (no automatic modification of the number of harmonics is performed by the `setFrequency()` function). Based on initial code of Robin Davies, 2005. Modified algorithm code by Gary Scavone, 2005.",
      "inherits": ["BLT", "UGen", "Object"],
      "constructors": [
        {
          "constructor": "BlitSquare",
          "arguments": [],
          "description": "Default constructor for BlitSquare."
        }
      ]
    },
    {
      "name": "FilterStk",
      "description": "FilterStk is an STK Filter base class inherited by all Stk Filter UGens such as BiQuad, TwoZero, PoleZero, etc. You should NOT need to use this UGen directly. Please refer to the documentation on other filter types instead.",
      "inherits": ["UGen", "Object"],
      "constructors": [
        {
          "constructor": "FilterStk",
          "arguments": [],
          "description": "Default constructor for FilterStk."
        }
      ],
      "member functions": [
        {
          "member function": "coefs",
          "return type": "string",
          "arguments": [
            {
              "type": "string",
              "name": "value"
            }
          ],
          "description": ""
        }
      ]
    },
    {
      "name": "WvIn",
      "description": "This class provides input support for various audio file formats. It also serves as a base class for 'realtime' streaming subclasses. WvIn loads the contents of an audio file for subsequent output. Linear interpolation is used for fractional 'read rates'. WvIn supports multi-channel data in interleaved format. It is important to distinguish the `tick()` methods, which return samples produced by averaging across sample frames, from the `tickFrame()` methods, which return pointers to multi-channel sample frames. For single-channel data, these methods return equivalent values. Small files are completely read into local memory during instantiation. Large files are read incrementally from disk. The file size threshold and the increment size values are defined in WvIn.h. WvIn currently supports WAV, AIFF, SND (AU), MAT-file (Matlab), and STK RAW file formats. Signed integer (8-, 16-, and 32-bit) and floating-point (32- and 64-bit) data types are supported. Uncompressed data types are not supported. If using MAT-files, data should be saved in an array with each data channel filling a matrix row. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["UGen", "Object"],
      "constructors": [
        {
          "constructor": "WvIn",
          "arguments": [],
          "description": "Default constructor for WvIn."
        }
      ],
      "member functions": [
        {
          "member function": "path",
          "return type": "string",
          "arguments": [
            {
              "type": "string",
              "name": "value"
            }
          ],
          "description": "Set file to be played."
        },
        {
          "member function": "path",
          "return type": "string",
          "arguments": [],
          "description": "Get file to be played."
        },
        {
          "member function": "rate",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set playback rate."
        },
        {
          "member function": "rate",
          "return type": "float",
          "arguments": [],
          "description": "Get playback rate."
        }
      ]
    },
    {
      "name": "WaveLoop",
      "description": "This class inherits from WvIn and provides audio file looping functionality. WaveLoop supports multi-channel data in interleaved format. It is important to distinguish the `tick()` methods, which return samples produced by averaging across sample frames, from the `tickFrame()` methods, which return pointers to multi-channel sample frames. For single-channel data, these methods return equivalent values. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["WvIn", "UGen", "Object"],
      "constructors": [
        {
          "constructor": "WaveLoop",
          "arguments": [],
          "description": "Default constructor for WaveLoop."
        }
      ],
      "member functions": [
        {
          "member function": "addPhase",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set offset by phase."
        },
        {
          "member function": "addPhase",
          "return type": "float",
          "arguments": [],
          "description": "Get offset by phase."
        },
        {
          "member function": "addPhaseOffset",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set phase offset."
        },
        {
          "member function": "addPhaseOffset",
          "return type": "float",
          "arguments": [],
          "description": "Get phase offset."
        },
        {
          "member function": "freq",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set frequency of playback (loops/second)."
        },
        {
          "member function": "freq",
          "return type": "float",
          "arguments": [],
          "description": "Get frequency of playback (loops/second)."
        }
      ]
    },
    {
      "name": "WvOut",
      "description": "This class provides output support for various audio file formats. It also serves as a base class for 'realtime' streaming subclasses. WvOut writes samples to an audio file. It supports multi-channel data in interleaved format. It is important to distinguish the `tick()` methods, which output single samples to all channels in a sample frame, from the `tickFrame()` method, which takes a pointer to multi-channel sample frame data. WvOut currently supports WAV, AIFF, AIFC, SND (AU), MAT-file (Matlab), and STK RAW file formats. Signed integer (8-, 16-, and 32-bit) and floating- point (32- and 64-bit) data types are supported. STK RAW files use 16-bit integers by definition. MAT-files will always be written as 64-bit floats. If a data type specification does not match the specified file type, the data type will automatically be modified. Uncompressed data types are not supported. Currently, WvOut is non-interpolating and the output rate is always `Stk::sampleRate()`. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/basic/rec.ck",
        "https://chuck.stanford.edu/doc/examples/basic/rec-auto.ck",
        "https://chuck.stanford.edu/doc/examples/basic/rec-auto-stereo.ck",
        "https://chuck.stanford.edu/doc/examples/stk/wvout-24bit.ck"
      ],
      "constructors": [
        {
          "constructor": "WvOut",
          "arguments": [],
          "description": "Default constructor for WvOut."
        }
      ],
      "member functions": [
        {
          "member function": "aifFilename",
          "return type": "string",
          "arguments": [
            {
              "type": "string",
              "name": "value"
            }
          ],
          "description": "Open an AIFF file for writing (with default datatype IO.INT16)."
        },
        {
          "member function": "aifFilename",
          "return type": "string",
          "arguments": [
            {
              "type": "string",
              "name": "value"
            },
            {
              "type": "int",
              "name": "datatype"
            }
          ],
          "description": "Open an AIFF file for writing, with datatype (e.g., IO.INT16, IO.INT24, IO.INT32, IO.FLOAT32, IO.FLOAT64)."
        },
        {
          "member function": "autoPrefix",
          "return type": "string",
          "arguments": [
            {
              "type": "string",
              "name": "value"
            }
          ],
          "description": "Set auto prefix string for \"special:auto\" filename generation."
        },
        {
          "member function": "autoPrefix",
          "return type": "string",
          "arguments": [],
          "description": "Get auto prefix string for \"special:auto\" filename generation."
        },
        {
          "member function": "closeFile",
          "return type": "string",
          "arguments": [
            {
              "type": "string",
              "name": "value"
            }
          ],
          "description": "Close the file properly."
        },
        {
          "member function": "closeFile",
          "return type": "string",
          "arguments": [],
          "description": "Close the file properly."
        },
        {
          "member function": "fileGain",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set file gain."
        },
        {
          "member function": "fileGain",
          "return type": "float",
          "arguments": [],
          "description": "Get file gain."
        },
        {
          "member function": "filename",
          "return type": "string",
          "arguments": [],
          "description": "Get filename."
        },
        {
          "member function": "matFilename",
          "return type": "string",
          "arguments": [
            {
              "type": "string",
              "name": "value"
            }
          ],
          "description": "Open MATLAB file for writing (with default datatype IO.FLOAT64)."
        },
        {
          "member function": "matFilename",
          "return type": "string",
          "arguments": [
            {
              "type": "string",
              "name": "value"
            },
            {
              "type": "int",
              "name": "datatype"
            }
          ],
          "description": "Open MATLAB file for writing; datatype for MATLAB files can only be IO.FLOAT64."
        },
        {
          "member function": "rawFilename",
          "return type": "string",
          "arguments": [
            {
              "type": "string",
              "name": "value"
            }
          ],
          "description": "Open a RAW file for writing (note: raw audio files are mono and 16-bit)."
        },
        {
          "member function": "rawFilename",
          "return type": "string",
          "arguments": [
            {
              "type": "string",
              "name": "value"
            },
            {
              "type": "int",
              "name": "datatype"
            }
          ],
          "description": "Open a RAW file for writing; datatype for raw files can only be IO.INT16."
        },
        {
          "member function": "record",
          "return type": "int",
          "arguments": [
            {
              "type": "int",
              "name": "value"
            }
          ],
          "description": "Start/stop output."
        },
        {
          "member function": "record",
          "return type": "int",
          "arguments": [],
          "description": "Start/stop output."
        },
        {
          "member function": "sndFilename",
          "return type": "string",
          "arguments": [
            {
              "type": "string",
              "name": "value"
            }
          ],
          "description": "Open SND file for writing (with default datatype IO.INT16)."
        },
        {
          "member function": "sndFilename",
          "return type": "string",
          "arguments": [
            {
              "type": "string",
              "name": "value"
            },
            {
              "type": "int",
              "name": "datatype"
            }
          ],
          "description": "Open SND file for writing, with datatype (e.g., IO.INT16, IO.INT24, IO.INT32, IO.FLOAT32, IO.FLOAT64)."
        },
        {
          "member function": "wavFilename",
          "return type": "string",
          "arguments": [
            {
              "type": "string",
              "name": "value"
            }
          ],
          "description": "Open WAVE file for writing (with default datatype IO.INT16)."
        },
        {
          "member function": "wavFilename",
          "return type": "string",
          "arguments": [
            {
              "type": "string",
              "name": "value"
            },
            {
              "type": "int",
              "name": "datatype"
            }
          ],
          "description": "Open WAVE file for writing, with datatype (e.g., IO.INT16, IO.INT24, IO.INT32, IO.FLOAT32, IO.FLOAT64)."
        }
      ]
    },
    {
      "name": "WvOut2",
      "description": "WvOut2 is the stereo version of WvOut; opens and writes a 2-channel audio file; see WvOut for usage.",
      "inherits": ["WvOut", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/basic/rec.ck",
        "https://chuck.stanford.edu/doc/examples/basic/rec-auto.ck",
        "https://chuck.stanford.edu/doc/examples/basic/rec-auto-stereo.ck",
        "https://chuck.stanford.edu/doc/examples/stk/wvout-24bit.ck"
      ],
      "constructors": [
        {
          "constructor": "WvOut2",
          "arguments": [],
          "description": "Default constructor for WvOut2."
        }
      ]
    },
    {
      "name": "StkInstrument",
      "description": "Super-class for STK instruments.",
      "inherits": ["UGen", "Object"],
      "constructors": [
        {
          "constructor": "StkInstrument",
          "arguments": [],
          "description": "Default constructor for StkInstrument."
        }
      ],
      "member functions": [
        {
          "member function": "controlChange",
          "return type": "void",
          "arguments": [
            {
              "type": "int",
              "name": "ctrl"
            },
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Assert control change; numbers are instrument specific; value range [0.0 - 127.0]."
        },
        {
          "member function": "freq",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set frequency."
        },
        {
          "member function": "freq",
          "return type": "float",
          "arguments": [],
          "description": "Get frequency."
        },
        {
          "member function": "noteOff",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Trigger note off."
        },
        {
          "member function": "noteOn",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Trigger note on."
        }
      ]
    },
    {
      "name": "BandedWG",
      "description": "This class uses banded waveguide techniques to model a variety of sounds, including bowed bars, glasses, and bowls. For more information, see Essl, G. and Cook, P. 'Banded Waveguides: Towards Physical Modelling of Bar Percussion Instruments', Proceedings of the 1999 International Computer Music Conference. Control Change Numbers: - Bow Pressure = 2 - Bow Motion = 4 - Strike Position = 8 (not implemented) - Vibrato Frequency = 11 - Gain = 1 - Bow Velocity = 128 - Instrument Presets = 16 - Uniform Bar = 0 - Tuned Bar = 1 - Glass Harmonica = 2 - Tibetan Bowl = 3 by Georg Essl, 1999 - 2002. Modified for Stk 4.0 by Gary Scavone.",
      "inherits": ["StkInstrument", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/stk/band-o-matic.ck",
        "https://chuck.stanford.edu/doc/examples/stk/bandedwg.ck",
        "https://chuck.stanford.edu/doc/examples/stk/bandedwg2.ck"
      ],
      "constructors": [
        {
          "constructor": "BandedWG",
          "arguments": [],
          "description": "Default constructor for BandedWG."
        }
      ],
      "member functions": [
        {
          "member function": "bowMotion",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set bow motion, [0.0-1.0]."
        },
        {
          "member function": "bowMotion",
          "return type": "float",
          "arguments": [],
          "description": "Get bow motion, [0.0-1.0]."
        },
        {
          "member function": "bowPressure",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set bow pressure, [0.0-1.0]."
        },
        {
          "member function": "bowPressure",
          "return type": "float",
          "arguments": [],
          "description": "Get bow pressure, [0.0-1.0]."
        },
        {
          "member function": "bowRate",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set bowing rate (seconds)."
        },
        {
          "member function": "bowRate",
          "return type": "float",
          "arguments": [],
          "description": "Get bowing rate (seconds)."
        },
        {
          "member function": "integrationConstant",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set integration constant, vibrato frequency."
        },
        {
          "member function": "integrationConstant",
          "return type": "float",
          "arguments": [],
          "description": "Get integration constant, vibrato frequency."
        },
        {
          "member function": "modesGain",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set amplitude for modes."
        },
        {
          "member function": "modesGain",
          "return type": "float",
          "arguments": [],
          "description": "Get amplitude for modes."
        },
        {
          "member function": "pluck",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Pluck instrument, [0.0-1.0]."
        },
        {
          "member function": "preset",
          "return type": "int",
          "arguments": [
            {
              "type": "int",
              "name": "value"
            }
          ],
          "description": "Set instrument preset, (0-3, see above)."
        },
        {
          "member function": "preset",
          "return type": "int",
          "arguments": [],
          "description": "Get instrument preset, (0-3, see above)."
        },
        {
          "member function": "startBowing",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Start bowing, [0.0-1.0]."
        },
        {
          "member function": "stopBowing",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Stop bowing, [0.0-1.0]."
        },
        {
          "member function": "strikePosition",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set strike position, [0.0-1.0]."
        },
        {
          "member function": "strikePosition",
          "return type": "float",
          "arguments": [],
          "description": "Get strike position, [0.0-1.0]."
        }
      ]
    },
    {
      "name": "BlowBotl",
      "description": "This class implements a helmholtz resonator (biquad filter) with a polynomial jet excitation (a la Cook). Control Change Numbers: - Noise Gain = 4 - Vibrato Frequency = 11 - Vibrato Gain = 1 - Volume = 128 by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["StkInstrument", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/stk/blowbotl.ck",
        "https://chuck.stanford.edu/doc/examples/stk/blowbotl2.ck"
      ],
      "constructors": [
        {
          "constructor": "BlowBotl",
          "arguments": [],
          "description": "Default constructor for BlowBotl."
        }
      ],
      "member functions": [
        {
          "member function": "noiseGain",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set noise component gain, [0.0-1.0]."
        },
        {
          "member function": "noiseGain",
          "return type": "float",
          "arguments": [],
          "description": "Get noise component gain, [0.0-1.0]."
        },
        {
          "member function": "rate",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set rate of attack."
        },
        {
          "member function": "rate",
          "return type": "float",
          "arguments": [],
          "description": "Get rate of attack."
        },
        {
          "member function": "startBlowing",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Start blowing, [0.0-1.0]."
        },
        {
          "member function": "stopBlowing",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Stop blowing, [0.0-1.0]."
        },
        {
          "member function": "vibratoFreq",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set vibrato frequency (Hz)."
        },
        {
          "member function": "vibratoFreq",
          "return type": "float",
          "arguments": [],
          "description": "Get vibrato frequency (Hz)."
        },
        {
          "member function": "vibratoGain",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set vibrato gain, [0.0-1.0]."
        },
        {
          "member function": "vibratoGain",
          "return type": "float",
          "arguments": [],
          "description": "Get vibrato gain, [0.0-1.0]."
        },
        {
          "member function": "volume",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set volume, [0.0-1.0]."
        },
        {
          "member function": "volume",
          "return type": "float",
          "arguments": [],
          "description": "Get volume, [0.0-1.0]."
        }
      ]
    },
    {
      "name": "BlowHole",
      "description": "This class is based on the clarinet model, with the addition of a two-port register hole and a three-port dynamic tonehole implementation, as discussed by Scavone and Cook (1998). In this implementation, the distances between the reed/register hole and tonehole/bell are fixed. As a result, both the tonehole and register hole will have variable influence on the playing frequency, which is dependent on the length of the air column. In addition, the highest playing freqeuency is limited by these fixed lengths. This is a digital waveguide model, making its use possibly subject to patents held by Stanford University, Yamaha, and others. Control Change Numbers: - Reed Stiffness = 2 - Noise Gain = 4 - Tonehole State = 11 - Register State = 1 - Breath Pressure = 128 Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["StkInstrument", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/stk/blowhole.ck",
        "https://chuck.stanford.edu/doc/examples/stk/blowhole2.ck"
      ],
      "constructors": [
        {
          "constructor": "BlowHole",
          "arguments": [],
          "description": "Default constructor for BlowHole."
        }
      ],
      "member functions": [
        {
          "member function": "noiseGain",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set noise component gain, [0.0-1.0]."
        },
        {
          "member function": "noiseGain",
          "return type": "float",
          "arguments": [],
          "description": "Get noise component gain, [0.0-1.0]."
        },
        {
          "member function": "pressure",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set pressure, [0.0-1.0]."
        },
        {
          "member function": "pressure",
          "return type": "float",
          "arguments": [],
          "description": "Get pressure, [0.0-1.0]."
        },
        {
          "member function": "rate",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set rate of attack, [0.0-1.0]."
        },
        {
          "member function": "rate",
          "return type": "float",
          "arguments": [],
          "description": "Get rate of attack, [0.0-1.0]."
        },
        {
          "member function": "reed",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set reed stiffness, [0.0-1.0]."
        },
        {
          "member function": "reed",
          "return type": "float",
          "arguments": [],
          "description": "Get reed stiffness, [0.0-1.0]."
        },
        {
          "member function": "startBlowing",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Start blowing, [0.0-1.0]."
        },
        {
          "member function": "stopBlowing",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Stop blowing, [0.0-1.0]."
        },
        {
          "member function": "tonehole",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set tonehole size, [0.0-1.0]."
        },
        {
          "member function": "tonehole",
          "return type": "float",
          "arguments": [],
          "description": "Get tonehole size, [0.0-1.0]."
        },
        {
          "member function": "vent",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set vent frequency, [0.0-1.0]."
        },
        {
          "member function": "vent",
          "return type": "float",
          "arguments": [],
          "description": "Get vent frequency, [0.0-1.0]."
        }
      ]
    },
    {
      "name": "Bowed",
      "description": "This class implements a bowed string model, a la Smith (1986), after McIntyre, Schumacher, Woodhouse (1983). This is a digital waveguide model, making its use possibly subject to patents held by Stanford University, Yamaha, and others. Control Change Numbers: - Bow Pressure = 2 - Bow Position = 4 - Vibrato Frequency = 11 - Vibrato Gain = 1 - Volume = 128 by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["StkInstrument", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/stk/bowed.ck",
        "https://chuck.stanford.edu/doc/examples/stk/bowed2.ck"
      ],
      "constructors": [
        {
          "constructor": "Bowed",
          "arguments": [],
          "description": "Default constructor for Bowed."
        }
      ],
      "member functions": [
        {
          "member function": "bowPosition",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set bow position, [0.0-1.0]."
        },
        {
          "member function": "bowPosition",
          "return type": "float",
          "arguments": [],
          "description": "Get bow position, [0.0-1.0]."
        },
        {
          "member function": "bowPressure",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set bow pressure, [0.0-1.0]."
        },
        {
          "member function": "bowPressure",
          "return type": "float",
          "arguments": [],
          "description": "Get bow pressure, [0.0-1.0]."
        },
        {
          "member function": "startBowing",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Start bowing, [0.0-1.0]."
        },
        {
          "member function": "stopBowing",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Stop bowing, [0.0-1.0]."
        },
        {
          "member function": "vibratoFreq",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set vibrato frequency (Hz)."
        },
        {
          "member function": "vibratoFreq",
          "return type": "float",
          "arguments": [],
          "description": "Get vibrato frequency (Hz)."
        },
        {
          "member function": "vibratoGain",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set vibrato gain, [0.0-1.0]."
        },
        {
          "member function": "vibratoGain",
          "return type": "float",
          "arguments": [],
          "description": "Get vibrato gain, [0.0-1.0]."
        },
        {
          "member function": "volume",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set volume, [0.0-1.0]."
        },
        {
          "member function": "volume",
          "return type": "float",
          "arguments": [],
          "description": "Get volume, [0.0-1.0]."
        }
      ]
    },
    {
      "name": "Brass",
      "description": "This class implements a simple brass instrument waveguide model, a la Cook (TBone, HosePlayer). This is a digital waveguide model, making its use possibly subject to patents held by Stanford University, Yamaha, and others. Control Change Numbers: - Lip Tension = 2 - Slide Length = 4 - Vibrato Frequency = 11 - Vibrato Gain = 1 - Volume = 128 by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["StkInstrument", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/stk/brass.ck",
        "https://chuck.stanford.edu/doc/examples/stk/brass2.ck"
      ],
      "constructors": [
        {
          "constructor": "Brass",
          "arguments": [],
          "description": "Default constructor for Brass."
        }
      ],
      "member functions": [
        {
          "member function": "clear",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Clear instrument."
        },
        {
          "member function": "lip",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set lip tension, [0.0-1.0]."
        },
        {
          "member function": "lip",
          "return type": "float",
          "arguments": [],
          "description": "Get lip tension, [0.0-1.0]."
        },
        {
          "member function": "rate",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set rate of attack (seconds)."
        },
        {
          "member function": "rate",
          "return type": "float",
          "arguments": [],
          "description": "Get rate of attack (seconds)."
        },
        {
          "member function": "slide",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set slide length, [0.0-1.0]."
        },
        {
          "member function": "slide",
          "return type": "float",
          "arguments": [],
          "description": "Get slide length, [0.0-1.0]."
        },
        {
          "member function": "startBlowing",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Start blowing, [0.0-1.0]."
        },
        {
          "member function": "stopBlowing",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Stop blowing, [0.0-1.0]."
        },
        {
          "member function": "vibratoFreq",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set vibrato frequency (Hz)."
        },
        {
          "member function": "vibratoFreq",
          "return type": "float",
          "arguments": [],
          "description": "Get vibrato frequency (Hz)."
        },
        {
          "member function": "vibratoGain",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set vibrato gain, [0.0-1.0]."
        },
        {
          "member function": "vibratoGain",
          "return type": "float",
          "arguments": [],
          "description": "Get vibrato gain, [0.0-1.0]."
        },
        {
          "member function": "volume",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set volume, [0.0-1.0]."
        },
        {
          "member function": "volume",
          "return type": "float",
          "arguments": [],
          "description": "Get volume, [0.0-1.0]."
        }
      ]
    },
    {
      "name": "Clarinet",
      "description": "This class implements a simple clarinet physical model, as discussed by Smith (1986), McIntyre, Schumacher, Woodhouse (1983), and others. This is a digital waveguide model, making its use possibly subject to patents held by Stanford University, Yamaha, and others. Control Change Numbers: - Reed Stiffness = 2 - Noise Gain = 4 - Vibrato Frequency = 11 - Vibrato Gain = 1 - Breath Pressure = 128 by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["StkInstrument", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/stk/clarinet.ck",
        "https://chuck.stanford.edu/doc/examples/stk/clarinet2.ck",
        "https://chuck.stanford.edu/doc/examples/midi/polyfony2.ck"
      ],
      "constructors": [
        {
          "constructor": "Clarinet",
          "arguments": [],
          "description": "Default constructor for Clarinet."
        }
      ],
      "member functions": [
        {
          "member function": "clear",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Clear instrument."
        },
        {
          "member function": "noiseGain",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set noise component gain, [0.0-1.0]."
        },
        {
          "member function": "noiseGain",
          "return type": "float",
          "arguments": [],
          "description": "Get noise component gain, [0.0-1.0]."
        },
        {
          "member function": "pressure",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set pressure, [0.0-1.0]."
        },
        {
          "member function": "pressure",
          "return type": "float",
          "arguments": [],
          "description": "Get pressure, [0.0-1.0]."
        },
        {
          "member function": "rate",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set rate of attack (seconds)."
        },
        {
          "member function": "rate",
          "return type": "float",
          "arguments": [],
          "description": "Get rate of attack (seconds)."
        },
        {
          "member function": "reed",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set reed stiffness, [0.0-1.0]."
        },
        {
          "member function": "reed",
          "return type": "float",
          "arguments": [],
          "description": "Get reed stiffness, [0.0-1.0]."
        },
        {
          "member function": "startBlowing",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Start blowing, [0.0-1.0]."
        },
        {
          "member function": "stopBlowing",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Stop blowing, [0.0-1.0]."
        },
        {
          "member function": "vibratoFreq",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set vibrato frequency (Hz)."
        },
        {
          "member function": "vibratoFreq",
          "return type": "float",
          "arguments": [],
          "description": "Get vibrato frequency (Hz)."
        },
        {
          "member function": "vibratoGain",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set vibrato gain, [0.0-1.0]."
        },
        {
          "member function": "vibratoGain",
          "return type": "float",
          "arguments": [],
          "description": "Get vibrato gain, [0.0-1.0]."
        }
      ]
    },
    {
      "name": "Flute",
      "description": "This class implements a simple flute physical model, as discussed by Karjalainen, Smith, Waryznyk, etc. The jet model uses a polynomial, a la Cook. This is a digital waveguide model, making its use possibly subject to patents held by Stanford University, Yamaha, and others. Control Change Numbers: - Jet Delay = 2 - Noise Gain = 4 - Vibrato Frequency = 11 - Vibrato Gain = 1 - Breath Pressure = 128 by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["StkInstrument", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/stk/flute.ck"
      ],
      "constructors": [
        {
          "constructor": "Flute",
          "arguments": [],
          "description": "Default constructor for Flute."
        }
      ],
      "member functions": [
        {
          "member function": "clear",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Clear instrument."
        },
        {
          "member function": "endReflection",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set end reflection."
        },
        {
          "member function": "endReflection",
          "return type": "float",
          "arguments": [],
          "description": "Get end reflection."
        },
        {
          "member function": "jetDelay",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set jet delay."
        },
        {
          "member function": "jetDelay",
          "return type": "float",
          "arguments": [],
          "description": "Get jet delay."
        },
        {
          "member function": "jetReflection",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set jet reflection."
        },
        {
          "member function": "jetReflection",
          "return type": "float",
          "arguments": [],
          "description": "Get jet reflection."
        },
        {
          "member function": "noiseGain",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set noise component gain, [0.0-1.0]."
        },
        {
          "member function": "noiseGain",
          "return type": "float",
          "arguments": [],
          "description": "Get noise component gain, [0.0-1.0]."
        },
        {
          "member function": "pressure",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set pressure, [0.0-1.0]."
        },
        {
          "member function": "pressure",
          "return type": "float",
          "arguments": [],
          "description": "Get pressure, [0.0-1.0]."
        },
        {
          "member function": "rate",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set rate of attack (seconds)."
        },
        {
          "member function": "rate",
          "return type": "float",
          "arguments": [],
          "description": "Get rate of attack (seconds)."
        },
        {
          "member function": "startBlowing",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Start blowing, [0.0-1.0]."
        },
        {
          "member function": "stopBlowing",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Stop blowing, [0.0-1.0]."
        },
        {
          "member function": "vibratoFreq",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set vibrato frequency (Hz)."
        },
        {
          "member function": "vibratoFreq",
          "return type": "float",
          "arguments": [],
          "description": "Get vibrato frequency (Hz)."
        },
        {
          "member function": "vibratoGain",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set vibrato gain, [0.0-1.0]."
        },
        {
          "member function": "vibratoGain",
          "return type": "float",
          "arguments": [],
          "description": "Get vibrato gain, [0.0-1.0]."
        }
      ]
    },
    {
      "name": "Mandolin",
      "description": "This class inherits from PluckTwo and uses 'commuted synthesis' techniques to model a mandolin instrument. This is a digital waveguide model, making its use possibly subject to patents held by Stanford University, Yamaha, and others. Commuted Synthesis, in particular, is covered by patents, granted, pending, and/or applied-for. All are assigned to the Board of Trustees, Stanford University. For information, contact the Office of Technology Licensing, Stanford University. Control Change Numbers: - Body Size = 2 - Pluck Position = 4 - String Sustain = 11 - String Detuning = 1 - Microphone Position = 128 by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["StkInstrument", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/stk/mandolin.ck",
        "https://chuck.stanford.edu/doc/examples/stk/mand-o-matic.ck",
        "https://chuck.stanford.edu/doc/examples/stk/mand-o-matic-simple.ck"
      ],
      "constructors": [
        {
          "constructor": "Mandolin",
          "arguments": [],
          "description": "Default constructor for Mandolin."
        }
      ],
      "member functions": [
        {
          "member function": "afterTouch",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set aftertouch (currently unsupported)."
        },
        {
          "member function": "bodyIR",
          "return type": "string",
          "arguments": [
            {
              "type": "string",
              "name": "path"
            }
          ],
          "description": "Set body impulse response."
        },
        {
          "member function": "bodyIR",
          "return type": "string",
          "arguments": [],
          "description": "Get body impulse response."
        },
        {
          "member function": "bodySize",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set body size (percentage)."
        },
        {
          "member function": "bodySize",
          "return type": "float",
          "arguments": [],
          "description": "Get body size (percentage)."
        },
        {
          "member function": "pluck",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Pluck instrument, [0.0-1.0]."
        },
        {
          "member function": "pluckPos",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set pluck position, [0.0-1.0]."
        },
        {
          "member function": "pluckPos",
          "return type": "float",
          "arguments": [],
          "description": "Get pluck position, [0.0-1.0]."
        },
        {
          "member function": "stringDamping",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set string damping, [0.0-1.0]."
        },
        {
          "member function": "stringDamping",
          "return type": "float",
          "arguments": [],
          "description": "Get string damping, [0.0-1.0]."
        },
        {
          "member function": "stringDetune",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set detuning of string pair, [0.0-1.0]."
        },
        {
          "member function": "stringDetune",
          "return type": "float",
          "arguments": [],
          "description": "Get detuning of string pair, [0.0-1.0]."
        }
      ]
    },
    {
      "name": "ModalBar",
      "description": "This class implements a number of different struck bar instruments. It inherits from the Modal class. Control Change Numbers: - Stick Hardness = 2 - Stick Position = 4 - Vibrato Gain = 11 - Vibrato Frequency = 7 - Direct Stick Mix = 1 - Volume = 128 - Modal Presets = 16 - Marimba = 0 - Vibraphone = 1 - Agogo = 2 - Wood1 = 3 - Reso = 4 - Wood2 = 5 - Beats = 6 - Two Fixed = 7 - Clump = 8 by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["StkInstrument", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/stk/modalbar.ck",
        "https://chuck.stanford.edu/doc/examples/stk/modalbar2.ck",
        "https://chuck.stanford.edu/doc/examples/stk/mode-o-matic.ck",
        "https://chuck.stanford.edu/doc/examples/stk/mode-o-test.ck"
      ],
      "constructors": [
        {
          "constructor": "ModalBar",
          "arguments": [],
          "description": "Default constructor for ModalBar."
        }
      ],
      "member functions": [
        {
          "member function": "clear",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Clear instrument."
        },
        {
          "member function": "damp",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Damp bar, [0.0-1.0]."
        },
        {
          "member function": "directGain",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set direct gain, [0.0-1.0]."
        },
        {
          "member function": "directGain",
          "return type": "float",
          "arguments": [],
          "description": "Get direct gain, [0.0-1.0]."
        },
        {
          "member function": "masterGain",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set master gain, [0.0-1.0]."
        },
        {
          "member function": "masterGain",
          "return type": "float",
          "arguments": [],
          "description": "Get master gain, [0.0-1.0]."
        },
        {
          "member function": "mode",
          "return type": "int",
          "arguments": [
            {
              "type": "int",
              "name": "value"
            }
          ],
          "description": "Set mode."
        },
        {
          "member function": "mode",
          "return type": "int",
          "arguments": [],
          "description": "Get mode."
        },
        {
          "member function": "modeGain",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set gain for selected mode, [0.0-1.0]."
        },
        {
          "member function": "modeGain",
          "return type": "float",
          "arguments": [],
          "description": "Get gain for selected mode, [0.0-1.0]."
        },
        {
          "member function": "modeRadius",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set radius for selected mode, [0.0-1.0]."
        },
        {
          "member function": "modeRadius",
          "return type": "float",
          "arguments": [],
          "description": "Get radius for selected mode, [0.0-1.0]."
        },
        {
          "member function": "modeRatio",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set ratio for selected mode."
        },
        {
          "member function": "modeRatio",
          "return type": "float",
          "arguments": [],
          "description": "Get ratio for selected mode."
        },
        {
          "member function": "preset",
          "return type": "int",
          "arguments": [
            {
              "type": "int",
              "name": "value"
            }
          ],
          "description": "Set preset (see above)."
        },
        {
          "member function": "preset",
          "return type": "int",
          "arguments": [],
          "description": "Get preset."
        },
        {
          "member function": "stickHardness",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set stick hardness, [0.0-1.0]."
        },
        {
          "member function": "stickHardness",
          "return type": "float",
          "arguments": [],
          "description": "Get stick hardness, [0.0-1.0]."
        },
        {
          "member function": "strike",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Strike bar, [0.0-1.0]."
        },
        {
          "member function": "strikePosition",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set strike position, [0.0-1.0]."
        },
        {
          "member function": "strikePosition",
          "return type": "float",
          "arguments": [],
          "description": "Get strike position, [0.0-1.0]."
        },
        {
          "member function": "vibratoFreq",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set vibrato frequency (Hz)."
        },
        {
          "member function": "vibratoFreq",
          "return type": "float",
          "arguments": [],
          "description": "Get vibrato frequency (Hz)."
        },
        {
          "member function": "vibratoGain",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set vibrato gain, [0.0-1.0]."
        },
        {
          "member function": "vibratoGain",
          "return type": "float",
          "arguments": [],
          "description": "Get vibrato gain, [0.0-1.0]."
        },
        {
          "member function": "volume",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set volume, [0.0-1.0]."
        },
        {
          "member function": "volume",
          "return type": "float",
          "arguments": [],
          "description": "Get volume, [0.0-1.0]."
        }
      ]
    },
    {
      "name": "Moog",
      "description": "This instrument uses one attack wave, one looped wave, and an ADSR envelope (inherited from the Sampler class) and adds two sweepable formant (FormSwep) filters. Control Change Numbers: - Filter Q = 2 - Filter Sweep Rate = 4 - Vibrato Frequency = 11 - Vibrato Gain = 1 - Gain = 128 by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["StkInstrument", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/stk/moog.ck",
        "https://chuck.stanford.edu/doc/examples/stk/moog2.ck",
        "https://chuck.stanford.edu/doc/examples/stk/moogie.ck"
      ],
      "constructors": [
        {
          "constructor": "Moog",
          "arguments": [],
          "description": "Default constructor for Moog."
        }
      ],
      "member functions": [
        {
          "member function": "afterTouch",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set aftertouch, [0.0-1.0]."
        },
        {
          "member function": "filterQ",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set filter Q value, [0.0-1.0]."
        },
        {
          "member function": "filterQ",
          "return type": "float",
          "arguments": [],
          "description": "Get filter Q value, [0.0-1.0]."
        },
        {
          "member function": "filterStartFreq",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "freq"
            }
          ],
          "description": "Set filter starting frequency."
        },
        {
          "member function": "filterStartFreq",
          "return type": "float",
          "arguments": [],
          "description": "Get filter starting frequency."
        },
        {
          "member function": "filterSweepRate",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set filter sweep rate, [0.0-1.0]."
        },
        {
          "member function": "filterSweepRate",
          "return type": "float",
          "arguments": [],
          "description": "Get filter sweep rate, [0.0-1.0]."
        },
        {
          "member function": "lfoDepth",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set LFO modulation depth."
        },
        {
          "member function": "lfoDepth",
          "return type": "float",
          "arguments": [],
          "description": "Get LFO modulation depth."
        },
        {
          "member function": "lfoSpeed",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set LFO modulation speed."
        },
        {
          "member function": "lfoSpeed",
          "return type": "float",
          "arguments": [],
          "description": "Get LFO modulation speed."
        },
        {
          "member function": "modDepth",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set modulation depth."
        },
        {
          "member function": "modDepth",
          "return type": "float",
          "arguments": [],
          "description": "Get modulation depth."
        },
        {
          "member function": "modSpeed",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set modulation speed."
        },
        {
          "member function": "modSpeed",
          "return type": "float",
          "arguments": [],
          "description": "Get modulation speed."
        },
        {
          "member function": "vibratoFreq",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set vibrato frequency (Hz)."
        },
        {
          "member function": "vibratoFreq",
          "return type": "float",
          "arguments": [],
          "description": "Get vibrato frequency (Hz)."
        },
        {
          "member function": "vibratoGain",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set vibrato gain, [0.0-1.0]."
        },
        {
          "member function": "vibratoGain",
          "return type": "float",
          "arguments": [],
          "description": "Get vibrato gain, [0.0-1.0]."
        },
        {
          "member function": "volume",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set volume."
        },
        {
          "member function": "volume",
          "return type": "float",
          "arguments": [],
          "description": "Get volume."
        }
      ]
    },
    {
      "name": "Saxofony",
      "description": "This class implements a 'hybrid' digital waveguide instrument that can generate a variety of wind-like sounds. It has also been referred to as the 'blowed string' model. The waveguide section is essentially that of a string, with one rigid and one lossy termination. The non-linear function is a reed table. The string can be 'blown' at any point between the terminations, though just as with strings, it is impossible to excite the system at either end. If the excitation is placed at the string mid-point, the sound is that of a clarinet. At points closer to the 'bridge', the sound is closer to that of a saxophone. See Scavone (2002) for more details. This is a digital waveguide model, making its use possibly subject to patents held by Stanford University, Yamaha, and others. Control Change Numbers: - Reed Stiffness = 2 - Reed Aperture = 26 - Noise Gain = 4 - Blow Position = 11 - Vibrato Frequency = 29 - Vibrato Gain = 1 - Breath Pressure = 128 by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["StkInstrument", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/stk/saxofony.ck"
      ],
      "constructors": [
        {
          "constructor": "Saxofony",
          "arguments": [],
          "description": "Default constructor for Saxofony."
        }
      ],
      "member functions": [
        {
          "member function": "aperture",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set reed aperture, [0.0-1.0]."
        },
        {
          "member function": "aperture",
          "return type": "float",
          "arguments": [],
          "description": "Get reed aperture, [0.0-1.0]."
        },
        {
          "member function": "blowPosition",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set lip stiffness, [0.0-1.0]."
        },
        {
          "member function": "blowPosition",
          "return type": "float",
          "arguments": [],
          "description": "Get lip stiffness, [0.0-1.0]."
        },
        {
          "member function": "clear",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Clear instrument."
        },
        {
          "member function": "noiseGain",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set noise component gain, [0.0-1.0]."
        },
        {
          "member function": "noiseGain",
          "return type": "float",
          "arguments": [],
          "description": "Get noise component gain, [0.0-1.0]."
        },
        {
          "member function": "pressure",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set pressure, [0.0-1.0]."
        },
        {
          "member function": "pressure",
          "return type": "float",
          "arguments": [],
          "description": "Get pressure, [0.0-1.0]."
        },
        {
          "member function": "rate",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set rate of attack (seconds)."
        },
        {
          "member function": "rate",
          "return type": "float",
          "arguments": [],
          "description": "Get rate of attack (seconds)."
        },
        {
          "member function": "startBlowing",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Start blowing, [0.0-1.0]."
        },
        {
          "member function": "stiffness",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set reed stiffness, [0.0-1.0]."
        },
        {
          "member function": "stiffness",
          "return type": "float",
          "arguments": [],
          "description": "Get reed stiffness, [0.0-1.0]."
        },
        {
          "member function": "stopBlowing",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Stop blowing, [0.0-1.0]."
        },
        {
          "member function": "vibratoFreq",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set vibrato frequency (Hz)."
        },
        {
          "member function": "vibratoFreq",
          "return type": "float",
          "arguments": [],
          "description": "Get vibrato frequency (Hz)."
        },
        {
          "member function": "vibratoGain",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set vibrato gain, [0.0-1.0]."
        },
        {
          "member function": "vibratoGain",
          "return type": "float",
          "arguments": [],
          "description": "Get vibrato gain, [0.0-1.0]."
        }
      ]
    },
    {
      "name": "Shakers",
      "description": "PhISEM (Physically Informed Stochastic Event Modeling) is an algorithmic approach for simulating collisions of multiple independent sound producing objects. This class is a meta-model that can simulate a Maraca, Sekere, Cabasa, Bamboo Wind Chimes, Water Drops, Tambourine, Sleighbells, and a Guiro. PhOLIES (Physically-Oriented Library of Imitated Environmental Sounds) is a similar approach for the synthesis of environmental sounds. This class implements simulations of breaking sticks, crunchy snow (or not), a wrench, sandpaper, and more. Control Change Numbers: - Shake Energy = 2 - System Decay = 4 - Number Of Objects = 11 - Resonance Frequency = 1 - Shake Energy = 128 - Instrument Selection = 1071 - Maraca = 0 - Cabasa = 1 - Sekere = 2 - Guiro = 3 - Water Drops = 4 - Bamboo Chimes = 5 - Tambourine = 6 - Sleigh Bells = 7 - Sticks = 8 - Crunch = 9 - Wrench = 10 - Sand Paper = 11 - Coke Can = 12 - Next Mug = 13 - Penny + Mug = 14 - Nickle + Mug = 15 - Dime + Mug = 16 - Quarter + Mug = 17 - Franc + Mug = 18 - Peso + Mug = 19 - Big Rocks = 20 - Little Rocks = 21 - Tuned Bamboo Chimes = 22 by Perry R. Cook, 1996 - 1999.",
      "inherits": ["StkInstrument", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/stk/shake-cycle.ck",
        "https://chuck.stanford.edu/doc/examples/stk/shake-o-matic.ck"
      ],
      "constructors": [
        {
          "constructor": "Shakers",
          "arguments": [],
          "description": "Default constructor for Shakers."
        }
      ],
      "member functions": [
        {
          "member function": "decay",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set system decay, [0.0-1.0]."
        },
        {
          "member function": "decay",
          "return type": "float",
          "arguments": [],
          "description": "Get system decay, [0.0-1.0]."
        },
        {
          "member function": "energy",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set shake energy, [0.0-1.0]."
        },
        {
          "member function": "energy",
          "return type": "float",
          "arguments": [],
          "description": "Get shake energy, [0.0-1.0]."
        },
        {
          "member function": "freq",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set frequency (Hz)."
        },
        {
          "member function": "freq",
          "return type": "float",
          "arguments": [],
          "description": "Get frequency (Hz)."
        },
        {
          "member function": "noteOff",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Trigger note off."
        },
        {
          "member function": "noteOn",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Trigger note on."
        },
        {
          "member function": "objects",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set number of objects, [0.0-128.0]."
        },
        {
          "member function": "objects",
          "return type": "float",
          "arguments": [],
          "description": "Get number of objects, [0.0-128.0]."
        },
        {
          "member function": "preset",
          "return type": "int",
          "arguments": [
            {
              "type": "int",
              "name": "value"
            }
          ],
          "description": "Set instrument, [0-22] (see above)."
        },
        {
          "member function": "preset",
          "return type": "int",
          "arguments": [],
          "description": "Get instrument, [0-22] (see above)."
        },
        {
          "member function": "which",
          "return type": "int",
          "arguments": [
            {
              "type": "int",
              "name": "value"
            }
          ],
          "description": "Set instrument, [0-22] (see above)."
        },
        {
          "member function": "which",
          "return type": "int",
          "arguments": [],
          "description": "Get instrument, [0-22] (see above)."
        }
      ]
    },
    {
      "name": "Sitar",
      "description": "This class implements a sitar plucked string physical model based on the Karplus-Strong algorithm.   This is a digital waveguide model, making its use possibly subject to patents held by Stanford University, Yamaha, and others. There exist at least two patents, assigned to Stanford, bearing the names of Karplus and/or Strong. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["StkInstrument", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/stk/sitar.ck"
      ],
      "constructors": [
        {
          "constructor": "Sitar",
          "arguments": [],
          "description": "Default constructor for Sitar."
        }
      ],
      "member functions": [
        {
          "member function": "clear",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Clear instrument."
        },
        {
          "member function": "pluck",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Pluck string."
        }
      ]
    },
    {
      "name": "StifKarp",
      "description": "This class implements a simple plucked string algorithm (Karplus Strong) with enhancements (Jaffe-Smith, Smith, and others), including string stiffness and pluck position controls. The stiffness is modeled with allpass filters. This is a digital waveguide model, making its use possibly subject to patents held by Stanford University, Yamaha, and others. Control Change Numbers: - Pickup Position = 4 - String Sustain = 11 - String Stretch = 1 by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["StkInstrument", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/stk/stifkarp.ck",
        "https://chuck.stanford.edu/doc/examples/stk/stif-o-karp.ck"
      ],
      "constructors": [
        {
          "constructor": "StifKarp",
          "arguments": [],
          "description": "Default constructor for StifKarp."
        }
      ],
      "member functions": [
        {
          "member function": "baseLoopGain",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set base loop gain, [0.0-1.0]."
        },
        {
          "member function": "baseLoopGain",
          "return type": "float",
          "arguments": [],
          "description": "Get base loop gain, [0.0-1.0]."
        },
        {
          "member function": "clear",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Clear instrument."
        },
        {
          "member function": "pickupPosition",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set pickup position, [0.0-1.0]."
        },
        {
          "member function": "pickupPosition",
          "return type": "float",
          "arguments": [],
          "description": "Get pickup position, [0.0-1.0]."
        },
        {
          "member function": "pluck",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Pluck string."
        },
        {
          "member function": "stretch",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set string stretch, [0.0-1.0]."
        },
        {
          "member function": "stretch",
          "return type": "float",
          "arguments": [],
          "description": "Get string stretch, [0.0-1.0]."
        },
        {
          "member function": "sustain",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set string sustain, [0.0-1.0]."
        },
        {
          "member function": "sustain",
          "return type": "float",
          "arguments": [],
          "description": "Get string sustain, [0.0-1.0]."
        }
      ]
    },
    {
      "name": "VoicForm",
      "description": "This instrument contains an excitation singing wavetable (looping wave with random and periodic vibrato, smoothing on frequency, etc.), excitation noise, and four sweepable complex resonances. Measured formant data is included, and enough data is there to support either parallel or cascade synthesis. In the floating point case cascade synthesis is the most natural so that's what you'll find here. Control Change Numbers: Voiced/Unvoiced Mix = 2 Vowel/Phoneme Selection = 4 Vibrato Frequency = 11 Vibrato Gain = 1 Loudness (Spectral Tilt) = 128 by Perry R. Cook and Gary P. Scavone, 1995 - 2002. Phoneme Names:   'eee' 'ihh' 'ehh' 'aaa'   'ahh' 'aww' 'ohh' 'uhh'   'uuu' 'ooo' 'rrr' 'lll'   'mmm' 'nnn' 'nng' 'ngg'   'fff' 'sss' 'thh' 'shh'   'xxx' 'hee' 'hoo' 'hah'   'bbb' 'ddd' 'jjj' 'ggg'   'vvv' 'zzz' 'thz' 'zhh'",
      "inherits": ["StkInstrument", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/stk/voic-o-form.ck"
      ],
      "constructors": [
        {
          "constructor": "VoicForm",
          "arguments": [],
          "description": "Default constructor for VoicForm."
        }
      ],
      "member functions": [
        {
          "member function": "loudness",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set 'loudness' of voice, [0.0-1.0]."
        },
        {
          "member function": "loudness",
          "return type": "float",
          "arguments": [],
          "description": "Get 'loudness' of voice, [0.0-1.0]."
        },
        {
          "member function": "phoneme",
          "return type": "string",
          "arguments": [
            {
              "type": "string",
              "name": "value"
            }
          ],
          "description": "Set phoneme (see above)."
        },
        {
          "member function": "phoneme",
          "return type": "string",
          "arguments": [],
          "description": "Get phoneme (see above)."
        },
        {
          "member function": "phonemeNum",
          "return type": "int",
          "arguments": [
            {
              "type": "int",
              "name": "value"
            }
          ],
          "description": "Set phoneme by number, [0.0-128.0]."
        },
        {
          "member function": "phonemeNum",
          "return type": "int",
          "arguments": [],
          "description": "Get phoneme by number, [0.0-128.0]."
        },
        {
          "member function": "pitchSweepRate",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set rate of pitch sweep, [0.0-1.0]."
        },
        {
          "member function": "pitchSweepRate",
          "return type": "float",
          "arguments": [],
          "description": "Get rate of pitch sweep, [0.0-1.0]."
        },
        {
          "member function": "quiet",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Stop singing, [0.0-1.0]."
        },
        {
          "member function": "speak",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Start singing, [0.0-1.0]."
        },
        {
          "member function": "unVoiced",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set mix for unvoiced component, [0.0 - 1.0]."
        },
        {
          "member function": "unVoiced",
          "return type": "float",
          "arguments": [],
          "description": "Get mix for unvoiced component, [0.0 - 1.0]."
        },
        {
          "member function": "vibratoFreq",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set vibrato frequency (Hz)."
        },
        {
          "member function": "vibratoFreq",
          "return type": "float",
          "arguments": [],
          "description": "Get vibrato frequency (Hz)."
        },
        {
          "member function": "vibratoGain",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set vibrato gain (Hz), [0.0-1.0]."
        },
        {
          "member function": "vibratoGain",
          "return type": "float",
          "arguments": [],
          "description": "Get vibrato gain (Hz), [0.0-1.0]."
        },
        {
          "member function": "voiceMix",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set voiced/unvoiced mix, [0.0-1.0]."
        },
        {
          "member function": "voiceMix",
          "return type": "float",
          "arguments": [],
          "description": "Get voiced/unvoiced mix, [0.0-1.0]."
        },
        {
          "member function": "voiced",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set mix for voiced component, [0.0 - 1.0]."
        },
        {
          "member function": "voiced",
          "return type": "float",
          "arguments": [],
          "description": "Get mix for voiced component, [0.0 - 1.0]."
        }
      ]
    },
    {
      "name": "KrstlChr",
      "description": "STK-style \"Crystal Choir\" FM synthesis instrument. This class implements 3 parallel operators with being modulated (feedback modulation), also referred to as algorithm 7 of the TX81Z. Algorithm 7 is :     1 -\\   2 - +-> Out   4-->3 -/    Control Change Numbers: - Total Modulator Index = 2 (.controlOne) - Modulator Crossfade = 4 (.controlTwo) - LFO Speed = 11 - LFO Depth = 1 - ADSR 2 & 4 Target = 128 The basic Chowning/Stanford FM patent expired in 1995, but there exist follow-on patents, mostly assigned to Yamaha. If you are of the type who should worry about this (making money) worry away. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["FM", "StkInstrument", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/stk/krstlchr-algo7.ck"
      ],
      "constructors": [
        {
          "constructor": "KrstlChr",
          "arguments": [],
          "description": "Default constructor for KrstlChr."
        }
      ]
    },
    {
      "name": "FM",
      "description": "STK FM synthesis super class. You should NOT need to use this UGen directly. Please refer to the documentation on FM subclasses instead. This class controls an arbitrary number of waves and envelopes, determined via a constructor argument. Control Change Numbers: - Control One = 2 - Control Two = 4 - LFO Speed = 11 - LFO Depth = 1 - ADSR 2 & 4 Target = 128 The basic Chowning/Stanford FM patent expired in 1995, but there exist follow-on patents, mostly assigned to Yamaha. If you are of the type who should worry about this (making money) worry away. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["StkInstrument", "UGen", "Object"],
      "constructors": [
        {
          "constructor": "FM",
          "arguments": [],
          "description": "Default constructor for FM."
        }
      ],
      "member functions": [
        {
          "member function": "afterTouch",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set aftertouch, [0.0-1.0]."
        },
        {
          "member function": "afterTouch",
          "return type": "float",
          "arguments": [],
          "description": "Get aftertouch, [0.0-1.0]."
        },
        {
          "member function": "controlOne",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set control one [instrument specific]."
        },
        {
          "member function": "controlOne",
          "return type": "float",
          "arguments": [],
          "description": "Get control one [instrument specific]."
        },
        {
          "member function": "controlTwo",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set control two [instrument specific]."
        },
        {
          "member function": "controlTwo",
          "return type": "float",
          "arguments": [],
          "description": "Get control two [instrument specific]."
        },
        {
          "member function": "getFMTableGain",
          "return type": "float",
          "arguments": [
            {
              "type": "int",
              "name": "index"
            }
          ],
          "description": "Get table gain lookup."
        },
        {
          "member function": "getFMTableSusLevel",
          "return type": "float",
          "arguments": [
            {
              "type": "int",
              "name": "index"
            }
          ],
          "description": "Get sustain level lookup."
        },
        {
          "member function": "getFMTableTime",
          "return type": "float",
          "arguments": [
            {
              "type": "int",
              "name": "index"
            }
          ],
          "description": "Get table time lookup."
        },
        {
          "member function": "lfoDepth",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set modulation depth, [0.0-1.0]."
        },
        {
          "member function": "lfoDepth",
          "return type": "float",
          "arguments": [],
          "description": "Get modulation depth, [0.0-1.0]."
        },
        {
          "member function": "lfoSpeed",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set modulation speed (Hz)."
        },
        {
          "member function": "lfoSpeed",
          "return type": "float",
          "arguments": [],
          "description": "Get modulation speed (Hz)."
        },
        {
          "member function": "op4Feedback",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set operator 4 feedback."
        },
        {
          "member function": "op4Feedback",
          "return type": "float",
          "arguments": [],
          "description": "Get operator 4 feedback."
        },
        {
          "member function": "opADSR",
          "return type": "float",
          "arguments": [
            {
              "type": "int",
              "name": "opNum"
            },
            {
              "type": "float",
              "name": "attack"
            },
            {
              "type": "float",
              "name": "decay"
            },
            {
              "type": "float",
              "name": "sustain"
            },
            {
              "type": "float",
              "name": "release"
            }
          ],
          "description": "Set operator ADSR: attack (sec), decay (sec), sustain [0.0-1.0], release (sec)."
        },
        {
          "member function": "opAM",
          "return type": "float",
          "arguments": [
            {
              "type": "int",
              "name": "opNum"
            },
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set operator amplitude modulation."
        },
        {
          "member function": "opAM",
          "return type": "float",
          "arguments": [
            {
              "type": "int",
              "name": "opNum"
            }
          ],
          "description": "Get operator amplitude modulation."
        },
        {
          "member function": "opGain",
          "return type": "float",
          "arguments": [
            {
              "type": "int",
              "name": "opNum"
            },
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set operator gain."
        },
        {
          "member function": "opGain",
          "return type": "float",
          "arguments": [
            {
              "type": "int",
              "name": "opNum"
            }
          ],
          "description": "Get gperator gain."
        },
        {
          "member function": "opRatio",
          "return type": "float",
          "arguments": [
            {
              "type": "int",
              "name": "opNum"
            },
            {
              "type": "float",
              "name": "ratio"
            }
          ],
          "description": "Set operator frequency ratio."
        },
        {
          "member function": "opRatio",
          "return type": "float",
          "arguments": [
            {
              "type": "int",
              "name": "opNum"
            }
          ],
          "description": "Get operator frequency ratio."
        },
        {
          "member function": "opWave",
          "return type": "float",
          "arguments": [
            {
              "type": "int",
              "name": "opNum"
            },
            {
              "type": "int",
              "name": "wave"
            }
          ],
          "description": "Set operator waveform [1-8]."
        }
      ]
    },
    {
      "name": "BeeThree",
      "description": "STK Hammond-oid organ FM synthesis instrument. This class implements a simple 4 operator topology, also referred to as algorithm 8 of the TX81Z. Algorithm 8 is :     1 --.   2 -\\|   +-> Out   3 -/|   4 --.   Control Change Numbers: - Operator 4 (feedback) Gain = 2 (.controlOne) - Operator 3 Gain = 4 (.controlTwo) - LFO Speed = 11 - LFO Depth = 1 - ADSR 2 & 4 Target = 128 The basic Chowning/Stanford FM patent expired in 1995, but there exist follow-on patents, mostly assigned to Yamaha. If you are of the type who should worry about this (making money) worry away. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["FM", "StkInstrument", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/hid/keyboard-organ.ck"
      ],
      "constructors": [
        {
          "constructor": "BeeThree",
          "arguments": [],
          "description": "Default constructor for BeeThree."
        }
      ]
    },
    {
      "name": "FMVoices",
      "description": "STK singing FM synthesis instrument. This class implements 3 carriers and a common modulator, also referred to as algorithm 6 of the TX81Z. Algorithm 6 is :     ___//->1 -\\   4-||-->2 - +-> Out   ___\\->3 -//   Control Change Numbers: - Vowel = 2 (.controlOne) - Spectral Tilt = 4 (.controlTwo) - LFO Speed = 11 - LFO Depth = 1 - ADSR 2 & 4 Target = 128 The basic Chowning/Stanford FM patent expired in 1995, but there exist follow-on patents, mostly assigned to Yamaha. If you are of the type who should worry about this (making money) worry away. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["FM", "StkInstrument", "UGen", "Object"],
      "constructors": [
        {
          "constructor": "FMVoices",
          "arguments": [],
          "description": "Default constructor for FMVoices."
        }
      ],
      "member functions": [
        {
          "member function": "adsrTarget",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set ADSR targets, [0.0-1.0]."
        },
        {
          "member function": "adsrTarget",
          "return type": "float",
          "arguments": [],
          "description": "Get ADSR targets, [0.0-1.0]."
        },
        {
          "member function": "spectralTilt",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set spectral tilt, [0.0-1.0]."
        },
        {
          "member function": "spectralTilt",
          "return type": "float",
          "arguments": [],
          "description": "Get spectral tilt, [0.0-1.0]."
        },
        {
          "member function": "vowel",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set vowel, [0.0-1.0]."
        },
        {
          "member function": "vowel",
          "return type": "float",
          "arguments": [],
          "description": "Get vowel, [0.0-1.0]."
        }
      ]
    },
    {
      "name": "HevyMetl",
      "description": "A STK heavy metal FM synthesis instrument. This class implements 3 cascade operators with feedback modulation, also referred to as algorithm 3 of the TX81Z. Algorithm 3 is :     ____4--\\   3-->2-- + -->1-->Out   Control Change Numbers: - Total Modulator Index = 2 (.controlOne) - Modulator Crossfade = 4 (.controlTwo) - LFO Speed = 11 - LFO Depth = 1 - ADSR 2 & 4 Target = 128 The basic Chowning/Stanford FM patent expired in 1995, but there exist follow-on patents, mostly assigned to Yamaha. If you are of the type who should worry about this (making money) worry away. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["FM", "StkInstrument", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/stk/hevymetl-algo3.ck",
        "https://chuck.stanford.edu/doc/examples/stk/hevymetl-dance-now.ck",
        "https://chuck.stanford.edu/doc/examples/stk/hevymetl-trumpet-algo3.ck"
      ],
      "constructors": [
        {
          "constructor": "HevyMetl",
          "arguments": [],
          "description": "Default constructor for HevyMetl."
        }
      ]
    },
    {
      "name": "HnkyTonk",
      "description": "STK-style Honkey Tonk Piano FM synthesis instrument. This class implements 4 cascade operators with feedback modulation, also referred to as algorithm 1 of the TX81Z. Algorithm 1 is :     ____4-->3-->2-->1-->Out   Control Change Numbers: - Total Modulator Index = 2 (.controlOne) - Modulator Crossfade = 4 (.controlTwo) - LFO Speed = 11 - LFO Depth = 1 - ADSR 2 & 4 Target = 128 The basic Chowning/Stanford FM patent expired in 1995, but there exist follow-on patents, mostly assigned to Yamaha. If you are of the type who should worry about this (making money) worry away. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["FM", "StkInstrument", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/stk/honkeytonk-algo1.ck",
        "https://chuck.stanford.edu/doc/examples/stk/nylon-guitar-algo1.ck",
        "https://chuck.stanford.edu/doc/examples/stk/jacobass-algo1.ck"
      ],
      "constructors": [
        {
          "constructor": "HnkyTonk",
          "arguments": [],
          "description": "Default constructor for HnkyTonk."
        }
      ]
    },
    {
      "name": "FrencHrn",
      "description": "STK-style French Horn FM synthesis instrument. This class implements 3 cascade operators and a 4th modulator with feedback modulation, also referred to as algorithm 2 of the TX81Z. Algorithm 2 is :     ____4--\\   3--+-->>2-->1-->Out   Control Change Numbers: - Total Modulator Index = 2 (.controlOne) - Modulator Crossfade = 4 (.controlTwo) - LFO Speed = 11 - LFO Depth = 1 - ADSR 2 & 4 Target = 128 The basic Chowning/Stanford FM patent expired in 1995, but there exist follow-on patents, mostly assigned to Yamaha. If you are of the type who should worry about this (making money) worry away. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["FM", "StkInstrument", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/stk/frenchrn-algo2.ck"
      ],
      "constructors": [
        {
          "constructor": "FrencHrn",
          "arguments": [],
          "description": "Default constructor for FrencHrn."
        }
      ]
    },
    {
      "name": "PercFlut",
      "description": "STK percussive flute FM synthesis instrument. This class implements algorithm 4 of the TX81Z. Algorithm 4 is :     4->3--\\   ___2-- + -->1-->Out   Control Change Numbers: - Total Modulator Index = 2 (.controlOne) - Modulator Crossfade = 4 (.controlTwo) - LFO Speed = 11 - LFO Depth = 1 - ADSR 2 & 4 Target = 128 The basic Chowning/Stanford FM patent expired in 1995, but there exist follow-on patents, mostly assigned to Yamaha. If you are of the type who should worry about this (making money) worry away. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["FM", "StkInstrument", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/ctrl/ctrl_sequencer.ck"
      ],
      "constructors": [
        {
          "constructor": "PercFlut",
          "arguments": [],
          "description": "Default constructor for PercFlut."
        }
      ]
    },
    {
      "name": "Rhodey",
      "description": "STK Fender Rhodes-like electric piano FM synthesis instrument. This class implements two simple FM Pairs summed together, also referred to as algorithm 5 of the TX81Z. Algorithm 5 is :     4->3--   + --> Out   2->1--   Control Change Numbers: - Modulator Index One = 2 (.controlOne) - Crossfade of Outputs = 4 (.controlTwo) - LFO Speed = 11 - LFO Depth = 1 - ADSR 2 & 4 Target = 128 The basic Chowning/Stanford FM patent expired in 1995, but there exist follow-on patents, mostly assigned to Yamaha. If you are of the type who should worry about this (making money) worry away. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["FM", "StkInstrument", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/stk/rhodey.ck"
      ],
      "constructors": [
        {
          "constructor": "Rhodey",
          "arguments": [],
          "description": "Default constructor for Rhodey."
        }
      ]
    },
    {
      "name": "TubeBell",
      "description": "STK tubular bell (orchestral chime) FM synthesis instrument. This class implements two simple FM Pairs summed together, also referred to as algorithm 5 of the TX81Z. Algorithm 5 is :     4->3--   + --> Out   2->1--   Control Change Numbers: - Modulator Index One = 2 (.controlOne) - Crossfade of Outputs = 4 (.controlTwo) - LFO Speed = 11 - LFO Depth = 1 - ADSR 2 & 4 Target = 128 The basic Chowning/Stanford FM patent expired in 1995, but there exist follow-on patents, mostly assigned to Yamaha. If you are of the type who should worry about this (making money) worry away. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["FM", "StkInstrument", "UGen", "Object"],
      "constructors": [
        {
          "constructor": "TubeBell",
          "arguments": [],
          "description": "Default constructor for TubeBell."
        }
      ]
    },
    {
      "name": "Wurley",
      "description": "STK Wurlitzer electric piano FM synthesis instrument. This class implements two simple FM Pairs summed together, also referred to as algorithm 5 of the TX81Z. Algorithm 5 is : 4->3-- + --> Out 2->1-- Control Change Numbers: - Modulator Index One = 2 (.controlOne) - Crossfade of Outputs = 4 (.controlTwo) - LFO Speed = 11 - LFO Depth = 1 - ADSR 2 & 4 Target = 128 The basic Chowning/Stanford FM patent expired in 1995, but there exist follow-on patents, mostly assigned to Yamaha. If you are of the type who should worry about this (making money) worry away. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["FM", "StkInstrument", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/stk/wurley.ck",
        "https://chuck.stanford.edu/doc/examples/stk/wurley2.ck",
        "https://chuck.stanford.edu/doc/examples/stk/wurley3.ck"
      ],
      "constructors": [
        {
          "constructor": "Wurley",
          "arguments": [],
          "description": "Default constructor for Wurley."
        }
      ]
    }
  ]
}
