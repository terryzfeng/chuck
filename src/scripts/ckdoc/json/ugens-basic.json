{
  "title": "Basic Unit Generators",
  "groups": [
    {
      "name": "UGen",
      "description": "Base class for all unit generator (UGen) types.",
      "inherits": ["Object"],
      "constructors": [
        {
          "constructor": "UGen",
          "arguments": [],
          "description": "Default constructor for UGen."
        }
      ],
      "member functions": [
        {
          "member function": "buffered",
          "return type": "int",
          "arguments": [
            {
              "type": "int",
              "name": "val"
            }
          ],
          "description": "Set the unit generator's buffered operation mode, typically used externally from hosts that embed ChucK as a component. If true, the UGen stores a buffer of its most recent samples, which can be fetched using global variables in the host language."
        },
        {
          "member function": "buffered",
          "return type": "int",
          "arguments": [],
          "description": "Get the ugen's buffered operation mode."
        },
        {
          "member function": "chan",
          "return type": "UGen",
          "arguments": [
            {
              "type": "int",
              "name": "num"
            }
          ],
          "description": "Get channel (as a UGen) at specified index."
        },
        {
          "member function": "channels",
          "return type": "int",
          "arguments": [
            {
              "type": "int",
              "name": "num"
            }
          ],
          "description": "Set number of channels. (currently NOT supported)"
        },
        {
          "member function": "channels",
          "return type": "int",
          "arguments": [],
          "description": "Get number of channels."
        },
        {
          "member function": "gain",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "val"
            }
          ],
          "description": "Set the gain of the unit generator."
        },
        {
          "member function": "gain",
          "return type": "float",
          "arguments": [],
          "description": "Get the gain of the unit generator."
        },
        {
          "member function": "isConnectedTo",
          "return type": "int",
          "arguments": [
            {
              "type": "UGen",
              "name": "rhs"
            }
          ],
          "description": "Return true if this UGen's output is connected to the input of rhs; if either this UGen or rhs has more than one channel, this function returns true if any connections exist between the channels; return false if there are no connections."
        },
        {
          "member function": "last",
          "return type": "float",
          "arguments": [],
          "description": "Get the last sample value of the unit generator."
        },
        {
          "member function": "op",
          "return type": "int",
          "arguments": [
            {
              "type": "int",
              "name": "val"
            }
          ],
          "description": "Set the unit generator's operation mode. Accepted values are: 1 (sum inputs), 2 (take difference between first input and subsequent inputs), 3 (multiply inputs), 4 (divide first input by subsequent inputs), 0 (do not synthesize audio, output 0) or -1 (passthrough inputs to output)."
        },
        {
          "member function": "op",
          "return type": "int",
          "arguments": [],
          "description": "Get the unit generator's operation mode."
        }
      ]
    },
    {
      "name": "Gain",
      "description": "A gain control unit generator. (All unit generators can already change their own gain; this is an explicit way to add multiple outputs together and scale them.)",
      "inherits": ["UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/basic/i-robot.ck"
      ],
      "constructors": [
        {
          "constructor": "Gain",
          "arguments": [],
          "description": "Default constructor for Gain."
        },
        {
          "constructor": "Gain",
          "arguments": [
            {
              "type": "float",
              "name": "gain"
            }
          ],
          "description": "Construct a Gain with default value."
        }
      ]
    },
    {
      "name": "Impulse",
      "description": "An impulse generator. Can be used to set the value of the next sample; default for each sample is 0 if not set. Additionally, this can be used to generate a digital signal, one sample at a time.",
      "inherits": ["UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/basic/imp.ck",
        "https://chuck.stanford.edu/doc/examples/basic/comb.ck",
        "https://chuck.stanford.edu/doc/examples/deep/chant.ck"
      ],
      "constructors": [
        {
          "constructor": "Impulse",
          "arguments": [],
          "description": "Default constructor for Impulse."
        }
      ],
      "member functions": [
        {
          "member function": "next",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "next"
            }
          ],
          "description": "Set the value of next sample. (Note: if you are using the UGen.last() method to read the output of the impulse, the value set by Impulse.next() does not appear as the output until after the next sample boundary. In this case, there is a consistent 1::samp offset between setting .next(...) and reading that value using .last().)"
        },
        {
          "member function": "next",
          "return type": "float",
          "arguments": [],
          "description": "Get value of next sample to be generated."
        }
      ]
    },
    {
      "name": "Step",
      "description": "A step generator. Step behaves like Impulse, except that once a next value is set, that value is held for all following samples, until a different value is set.",
      "inherits": ["UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/basic/step.ck",
        "https://chuck.stanford.edu/doc/examples/basic/fm3.ck",
        "https://chuck.stanford.edu/doc/examples/basic/zerox.ck"
      ],
      "constructors": [
        {
          "constructor": "Step",
          "arguments": [],
          "description": "Default constructor for Step."
        },
        {
          "constructor": "Step",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Construct a Step with default value."
        }
      ],
      "member functions": [
        {
          "member function": "next",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "next"
            }
          ],
          "description": "Set the next step value."
        },
        {
          "member function": "next",
          "return type": "float",
          "arguments": [],
          "description": "Get the next step value."
        }
      ]
    },
    {
      "name": "SndBuf",
      "description": "An interpolating sound buffer/player with single-channel output; can read audio data from a variety of uncompressed formats.",
      "inherits": ["UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/basic/sndbuf.ck",
        "https://chuck.stanford.edu/doc/examples/basic/doh.ck",
        "https://chuck.stanford.edu/doc/examples/basic/valueat.ck",
        "https://chuck.stanford.edu/doc/examples/otf_01.ck",
        "https://chuck.stanford.edu/doc/examples/otf_02.ck",
        "https://chuck.stanford.edu/doc/examples/otf_03.ck",
        "https://chuck.stanford.edu/doc/examples/otf_04.ck"
      ],
      "constructors": [
        {
          "constructor": "SndBuf",
          "arguments": [],
          "description": "Default constructor for SndBuf."
        },
        {
          "constructor": "SndBuf",
          "arguments": [
            {
              "type": "string",
              "name": "path"
            }
          ],
          "description": "Construct a SndBuf with the 'path' to a sound file to read."
        },
        {
          "constructor": "SndBuf",
          "arguments": [
            {
              "type": "string",
              "name": "path"
            },
            {
              "type": "float",
              "name": "rate"
            }
          ],
          "description": "Construct a SndBuf with the 'path' to a sound file to read, and a default playback 'rate' (1.0 is normal rate)"
        },
        {
          "constructor": "SndBuf",
          "arguments": [
            {
              "type": "string",
              "name": "path"
            },
            {
              "type": "float",
              "name": "rate"
            },
            {
              "type": "int",
              "name": "pos"
            }
          ],
          "description": "Construct a SndBuf with the 'path' to a sound file to read, a default playback 'rate' (1.0 is normal rate), and starting at sample position 'pos'"
        }
      ],
      "member functions": [
        {
          "member function": "channel",
          "return type": "int",
          "arguments": [
            {
              "type": "int",
              "name": "channel"
            }
          ],
          "description": "For sound file containing more than one channel of audio, select the channel to play."
        },
        {
          "member function": "channel",
          "return type": "int",
          "arguments": [],
          "description": "Get the selected chanel of audio this buffer is playing."
        },
        {
          "member function": "channels",
          "return type": "int",
          "arguments": [],
          "description": "Get number of channels available in the sound file."
        },
        {
          "member function": "chunks",
          "return type": "int",
          "arguments": [
            {
              "type": "int",
              "name": "frames"
            }
          ],
          "description": "Set chunk size, in frames, for loading the file from disk. Set to 0 to disable chunking."
        },
        {
          "member function": "chunks",
          "return type": "int",
          "arguments": [],
          "description": "Get chunk size, in frames, for loading the file from disk. 0 indicates that chunking is disabled."
        },
        {
          "member function": "frames",
          "return type": "int",
          "arguments": [],
          "description": "Get total number of sample frames in the file; same as .samples()."
        },
        {
          "member function": "freq",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "freq"
            }
          ],
          "description": "Set loop rate (in file loops per second)."
        },
        {
          "member function": "freq",
          "return type": "float",
          "arguments": [],
          "description": "Get loop rate (in file loops per second)."
        },
        {
          "member function": "interp",
          "return type": "int",
          "arguments": [
            {
              "type": "int",
              "name": "interp"
            }
          ],
          "description": "Set interpolation mode: (0) drop sample; (1) linear interpolation; (2) sinc interpolation."
        },
        {
          "member function": "interp",
          "return type": "int",
          "arguments": [],
          "description": "Get interpolation mode: (0) drop sample; (1) linear interpolation; (2) sinc interpolation."
        },
        {
          "member function": "length",
          "return type": "dur",
          "arguments": [],
          "description": "Get total length of the file as a duration."
        },
        {
          "member function": "loop",
          "return type": "int",
          "arguments": [
            {
              "type": "int",
              "name": "loop"
            }
          ],
          "description": "Toggle looping file playback."
        },
        {
          "member function": "loop",
          "return type": "int",
          "arguments": [],
          "description": "Get whether file playback is set to loop."
        },
        {
          "member function": "phase",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "phase"
            }
          ],
          "description": "Set phase position, normalized to [0,1)."
        },
        {
          "member function": "phase",
          "return type": "float",
          "arguments": [],
          "description": "Get phase position, normalized to [0,1)."
        },
        {
          "member function": "phaseOffset",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Advance the playhead by the specified phase offset in [0,1), where 0 is no advance and 1 advance the entire length of the file."
        },
        {
          "member function": "play",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "play"
            }
          ],
          "description": "(same as .rate)"
        },
        {
          "member function": "play",
          "return type": "float",
          "arguments": [],
          "description": "(same as .rate)"
        },
        {
          "member function": "pos",
          "return type": "int",
          "arguments": [
            {
              "type": "int",
              "name": "pos"
            }
          ],
          "description": "Set play position (between 0 and number of samples)."
        },
        {
          "member function": "pos",
          "return type": "int",
          "arguments": [],
          "description": "Get play position (between 0 and number of samples)."
        },
        {
          "member function": "rate",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "rate"
            }
          ],
          "description": "Set playback rate (relative to file's natural speed). For example, 1.0 is 'normal', 0.5 is half speed, and 2 is twice as fast."
        },
        {
          "member function": "rate",
          "return type": "float",
          "arguments": [],
          "description": "Get playback rate (relative to file's natural speed). For example, 1.0 is 'normal', 0.5 is half speed, and 2 is twice as fast."
        },
        {
          "member function": "read",
          "return type": "string",
          "arguments": [
            {
              "type": "string",
              "name": "read"
            }
          ],
          "description": "Read file for reading."
        },
        {
          "member function": "ready",
          "return type": "int",
          "arguments": [],
          "description": "Query whether the SndBuf is ready for use (e.g., sound file successfully loaded)."
        },
        {
          "member function": "samples",
          "return type": "int",
          "arguments": [],
          "description": "Get total number of sample frames in the file; same as .frames()."
        },
        {
          "member function": "valueAt",
          "return type": "float",
          "arguments": [
            {
              "type": "int",
              "name": "pos"
            }
          ],
          "description": "Get sample value at given position (in samples)."
        },
        {
          "member function": "write",
          "return type": "string",
          "arguments": [
            {
              "type": "string",
              "name": "read"
            }
          ],
          "description": "Set file for writing (currently unsupported)."
        }
      ]
    },
    {
      "name": "SndBuf2",
      "description": "An interpolating sound buffer with two-channel output. Reads from a variety of uncompressed formats.",
      "inherits": ["SndBuf", "UGen", "Object"],
      "constructors": [
        {
          "constructor": "SndBuf2",
          "arguments": [],
          "description": "Default constructor for SndBuf2."
        }
      ]
    },
    {
      "name": "ADSR",
      "description": "This Envelope subclass implements a traditional ADSR (Attack, Decay, Sustain, Release) envelope. It responds to simple `keyOn` and `keyOff` messages, keeping track of its state. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["Envelope", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/basic/adsr.ck",
        "https://chuck.stanford.edu/doc/examples/basic/blit2.ck"
      ],
      "constructors": [
        {
          "constructor": "ADSR",
          "arguments": [],
          "description": "Default constructor for ADSR."
        },
        {
          "constructor": "ADSR",
          "arguments": [
            {
              "type": "dur",
              "name": "attack"
            },
            {
              "type": "dur",
              "name": "decay"
            },
            {
              "type": "float",
              "name": "sustain"
            },
            {
              "type": "dur",
              "name": "release"
            }
          ],
          "description": "Construct an ADSR with attack, decay, sustain, and release values. Attack, decay, and release values are durations; sustain is a float value typically between 0 and 1."
        },
        {
          "constructor": "ADSR",
          "arguments": [
            {
              "type": "float",
              "name": "attack"
            },
            {
              "type": "float",
              "name": "decay"
            },
            {
              "type": "float",
              "name": "sustain"
            },
            {
              "type": "float",
              "name": "release"
            }
          ],
          "description": "Construct an ADSR with attack, decay, sustain, and release values. Attack, decay, and release values are in seconds; sustain is a float value typically between 0 and 1."
        }
      ],
      "member functions": [
        {
          "member function": "attackRate",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set attack rate."
        },
        {
          "member function": "attackRate",
          "return type": "float",
          "arguments": [],
          "description": "Get attack rate."
        },
        {
          "member function": "attackTime",
          "return type": "dur",
          "arguments": [
            {
              "type": "dur",
              "name": "value"
            }
          ],
          "description": "Set attack time."
        },
        {
          "member function": "attackTime",
          "return type": "dur",
          "arguments": [],
          "description": "Get attack time."
        },
        {
          "member function": "decayRate",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set decay rate."
        },
        {
          "member function": "decayRate",
          "return type": "float",
          "arguments": [],
          "description": "Get decay rate."
        },
        {
          "member function": "decayTime",
          "return type": "dur",
          "arguments": [
            {
              "type": "dur",
              "name": "value"
            }
          ],
          "description": "Set decay time."
        },
        {
          "member function": "decayTime",
          "return type": "dur",
          "arguments": [],
          "description": "Get decay time."
        },
        {
          "member function": "releaseRate",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set release rate."
        },
        {
          "member function": "releaseRate",
          "return type": "float",
          "arguments": [],
          "description": "Get release rate."
        },
        {
          "member function": "releaseTime",
          "return type": "dur",
          "arguments": [
            {
              "type": "dur",
              "name": "value"
            }
          ],
          "description": "Set release time."
        },
        {
          "member function": "releaseTime",
          "return type": "dur",
          "arguments": [],
          "description": "Get release time."
        },
        {
          "member function": "set",
          "return type": "void",
          "arguments": [
            {
              "type": "float",
              "name": "attackTime"
            },
            {
              "type": "float",
              "name": "decayTime"
            },
            {
              "type": "float",
              "name": "sustainLevel"
            },
            {
              "type": "float",
              "name": "releaseTime"
            }
          ],
          "description": "Set attack, decay, sustain, and release all at once (in seconds)."
        },
        {
          "member function": "set",
          "return type": "void",
          "arguments": [
            {
              "type": "dur",
              "name": "attackDuration"
            },
            {
              "type": "dur",
              "name": "decayDuration"
            },
            {
              "type": "float",
              "name": "sustainLevel"
            },
            {
              "type": "dur",
              "name": "releaseDuration"
            }
          ],
          "description": "Set attack, decay, sustain, and release all at once."
        },
        {
          "member function": "state",
          "return type": "int",
          "arguments": [],
          "description": "Get state; attack=0, decay=1, sustain=2, release=3, done=4."
        },
        {
          "member function": "sustainLevel",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set sustain level."
        },
        {
          "member function": "sustainLevel",
          "return type": "float",
          "arguments": [],
          "description": "Get sustain level."
        }
      ],
      "static member variables": [
        {
          "name": "ATTACK",
          "type": "int",
          "description": "See state() function. Denotes that the envelope is in the attack stage."
        },
        {
          "name": "DECAY",
          "type": "int",
          "description": "See state() function. Denotes that the envelope is in the decay stage."
        },
        {
          "name": "DONE",
          "type": "int",
          "description": "See state() function. Denotes that the envelope has completed all stages."
        },
        {
          "name": "RELEASE",
          "type": "int",
          "description": "See state() function. Denotes that the envelope is in the release stage."
        },
        {
          "name": "SUSTAIN",
          "type": "int",
          "description": "See state() function. Denotes that the envelope is in the sustain stage."
        }
      ]
    },
    {
      "name": "Envelope",
      "description": "This class implements a simple envelope generator which is capable of ramping to a target value by a specified rate. It also responds to simple `keyOn` and `keyOff` messages, ramping to 1.0 on `keyOn` and to 0.0 on `keyOff`. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/basic/envelope.ck",
        "https://chuck.stanford.edu/doc/examples/basic/envelope2.ck",
        "https://chuck.stanford.edu/doc/examples/basic/chirp2.ck",
        "https://chuck.stanford.edu/doc/examples/deep/say-chu.ck"
      ],
      "constructors": [
        {
          "constructor": "Envelope",
          "arguments": [],
          "description": "Default constructor for Envelope."
        },
        {
          "constructor": "Envelope",
          "arguments": [
            {
              "type": "dur",
              "name": "durationToTarget"
            }
          ],
          "description": "Construct an Envelope with duration to reach target (assumed to be 1.0); FYI this does not start the Envelope until .keyOn() is called."
        },
        {
          "constructor": "Envelope",
          "arguments": [
            {
              "type": "float",
              "name": "secondsToTarget"
            }
          ],
          "description": "Construct an Envelope with duration (in seconds) to reach target (assumed to be 1.0); FYI this does not start the Envelope until .keyOn() is called."
        },
        {
          "constructor": "Envelope",
          "arguments": [
            {
              "type": "dur",
              "name": "durationToTarget"
            },
            {
              "type": "float",
              "name": "target"
            }
          ],
          "description": "Construct an Envelope with duration to reach target; FYI this does not start the Envelope until .keyOn() is called."
        },
        {
          "constructor": "Envelope",
          "arguments": [
            {
              "type": "float",
              "name": "secondsToTarget"
            },
            {
              "type": "float",
              "name": "target"
            }
          ],
          "description": "Construct an Envelope with duration (in seconds) to reach target; FYI this does not start the Envelope until .keyOn() is called."
        }
      ],
      "member functions": [
        {
          "member function": "duration",
          "return type": "dur",
          "arguments": [
            {
              "type": "dur",
              "name": "value"
            }
          ],
          "description": "Set duration to reach target."
        },
        {
          "member function": "duration",
          "return type": "dur",
          "arguments": [],
          "description": "Get duration to reach target."
        },
        {
          "member function": "keyOff",
          "return type": "int",
          "arguments": [],
          "description": "Get keyOff state."
        },
        {
          "member function": "keyOff",
          "return type": "int",
          "arguments": [
            {
              "type": "int",
              "name": "value"
            }
          ],
          "description": "Ramp to 0.0."
        },
        {
          "member function": "keyOn",
          "return type": "int",
          "arguments": [],
          "description": "Get keyOn state."
        },
        {
          "member function": "keyOn",
          "return type": "int",
          "arguments": [
            {
              "type": "int",
              "name": "value"
            }
          ],
          "description": "Ramp to 1.0."
        },
        {
          "member function": "ramp",
          "return type": "dur",
          "arguments": [
            {
              "type": "dur",
              "name": "durationToTarget"
            },
            {
              "type": "float",
              "name": "target"
            }
          ],
          "description": "Over the given duration, ramp toward the specified target; returns the given duration."
        },
        {
          "member function": "ramp",
          "return type": "dur",
          "arguments": [
            {
              "type": "float",
              "name": "secondsToTarget"
            },
            {
              "type": "float",
              "name": "target"
            }
          ],
          "description": "Over the given duration (in seconds), ramp toward the specified target; returns the given duration."
        },
        {
          "member function": "rate",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set rate of change."
        },
        {
          "member function": "rate",
          "return type": "float",
          "arguments": [],
          "description": "Get rate of change."
        },
        {
          "member function": "target",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set value to ramp to."
        },
        {
          "member function": "target",
          "return type": "float",
          "arguments": [],
          "description": "Get value to ramp to."
        },
        {
          "member function": "time",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set time to reach target (in seconds)."
        },
        {
          "member function": "time",
          "return type": "float",
          "arguments": [],
          "description": "Get time to reach target (in seconds)."
        },
        {
          "member function": "value",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set immediate value."
        },
        {
          "member function": "value",
          "return type": "float",
          "arguments": [],
          "description": "Get immediate value."
        }
      ]
    },
    {
      "name": "Delay",
      "description": "A non-interpolating digital delay-line. A fixed maximum length of 4095 and a delay of zero is set using the default constructor. Alternatively, the delay and maximum length can be set during instantiation with an overloaded constructor. A non-interpolating delay line is typically used in fixed delay-length applications, such as for reverberation. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/basic/comb.ck",
        "https://chuck.stanford.edu/doc/examples/deep/plu.ck"
      ],
      "constructors": [
        {
          "constructor": "Delay",
          "arguments": [],
          "description": "Default constructor for Delay."
        },
        {
          "constructor": "Delay",
          "arguments": [
            {
              "type": "dur",
              "name": "delay"
            }
          ],
          "description": "Construct a Delay with delay length and, implicitly, delay max."
        },
        {
          "constructor": "Delay",
          "arguments": [
            {
              "type": "dur",
              "name": "delay"
            },
            {
              "type": "dur",
              "name": "max"
            }
          ],
          "description": "Construct a Delay with delay length and delay max."
        }
      ],
      "member functions": [
        {
          "member function": "clear",
          "return type": "void",
          "arguments": [],
          "description": "Clear delay line."
        },
        {
          "member function": "delay",
          "return type": "dur",
          "arguments": [
            {
              "type": "dur",
              "name": "value"
            }
          ],
          "description": "Set length of delay."
        },
        {
          "member function": "delay",
          "return type": "dur",
          "arguments": [],
          "description": "Get length of delay."
        },
        {
          "member function": "max",
          "return type": "dur",
          "arguments": [
            {
              "type": "dur",
              "name": "value"
            }
          ],
          "description": "Set max delay (buffer size)."
        },
        {
          "member function": "max",
          "return type": "dur",
          "arguments": [],
          "description": "Get max delay (buffer size)."
        },
        {
          "member function": "set",
          "return type": "void",
          "arguments": [
            {
              "type": "dur",
              "name": "delay"
            },
            {
              "type": "dur",
              "name": "max"
            }
          ],
          "description": "Set delay length and delay max; delay should be <= max."
        }
      ]
    },
    {
      "name": "DelayL",
      "description": "A fractional-length digital delay-line using first-order linear interpolation. A fixed maximum length of 4095 and a delay of zero is set using the default constructor. Alternatively, the delay and maximum length can be set during instantiation with an overloaded constructor. Linear interpolation is an efficient technique for achieving fractional delay lengths, though it does introduce high-frequency signal attenuation to varying degrees depending on the fractional delay setting. The use of higher order Lagrange interpolators can typically improve (minimize) this attenuation characteristic. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/basic/delay.ck",
        "https://chuck.stanford.edu/doc/examples/basic/delay2.ck",
        "https://chuck.stanford.edu/doc/examples/basic/i-robot.ck",
        "https://chuck.stanford.edu/doc/examples/multi/we-robot.ck",
        "https://chuck.stanford.edu/doc/examples/analysis/xcorr.ck",
        "https://chuck.stanford.edu/doc/examples/ai/word2vec/poem-i-feel.ck"
      ],
      "constructors": [
        {
          "constructor": "DelayL",
          "arguments": [],
          "description": "Default constructor for DelayL."
        },
        {
          "constructor": "DelayL",
          "arguments": [
            {
              "type": "dur",
              "name": "delay"
            }
          ],
          "description": "Construct a DelayL with delay length and, implicitly, delay max."
        },
        {
          "constructor": "DelayL",
          "arguments": [
            {
              "type": "dur",
              "name": "delay"
            },
            {
              "type": "dur",
              "name": "max"
            }
          ],
          "description": "Construct a DelayL with delay length and delay max."
        }
      ],
      "member functions": [
        {
          "member function": "clear",
          "return type": "void",
          "arguments": [],
          "description": "Clear delay line."
        },
        {
          "member function": "delay",
          "return type": "dur",
          "arguments": [
            {
              "type": "dur",
              "name": "value"
            }
          ],
          "description": "Set length of delay."
        },
        {
          "member function": "delay",
          "return type": "dur",
          "arguments": [],
          "description": "Get length of delay."
        },
        {
          "member function": "max",
          "return type": "dur",
          "arguments": [
            {
              "type": "dur",
              "name": "value"
            }
          ],
          "description": "Set max delay (buffer size)."
        },
        {
          "member function": "max",
          "return type": "dur",
          "arguments": [],
          "description": "Get max delay (buffer size)."
        },
        {
          "member function": "set",
          "return type": "void",
          "arguments": [
            {
              "type": "dur",
              "name": "delay"
            },
            {
              "type": "dur",
              "name": "max"
            }
          ],
          "description": "Set delay length and delay max; delay should be <= max."
        }
      ]
    },
    {
      "name": "DelayA",
      "description": "A fractional-length digital delay-line using a first-order allpass filter. A fixed maximum length of 4095 and a delay of 0.5 is set using the default constructor. Alternatively, the delay and maximum length can be set during instantiation with an overloaded constructor. An allpass filter has unity magnitude gain but variable phase delay properties, making it useful in achieving fractional delays without affecting a signal's frequency magnitude response. In order to achieve a maximally flat phase delay response, the minimum delay possible in this implementation is limited to a value of 0.5. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/deep/ks-chord.ck"
      ],
      "constructors": [
        {
          "constructor": "DelayA",
          "arguments": [],
          "description": "Default constructor for DelayA."
        },
        {
          "constructor": "DelayA",
          "arguments": [
            {
              "type": "dur",
              "name": "delay"
            }
          ],
          "description": "Construct a DelayA with delay length and, implicitly, delay max."
        },
        {
          "constructor": "DelayA",
          "arguments": [
            {
              "type": "dur",
              "name": "delay"
            },
            {
              "type": "dur",
              "name": "max"
            }
          ],
          "description": "Construct a DelayA with delay length and delay max."
        }
      ],
      "member functions": [
        {
          "member function": "clear",
          "return type": "void",
          "arguments": [],
          "description": "Clear delay line."
        },
        {
          "member function": "delay",
          "return type": "dur",
          "arguments": [
            {
              "type": "dur",
              "name": "value"
            }
          ],
          "description": "Set length of delay."
        },
        {
          "member function": "delay",
          "return type": "dur",
          "arguments": [],
          "description": "Get length of delay."
        },
        {
          "member function": "max",
          "return type": "dur",
          "arguments": [
            {
              "type": "dur",
              "name": "value"
            }
          ],
          "description": "Set max delay (buffer size)."
        },
        {
          "member function": "max",
          "return type": "dur",
          "arguments": [],
          "description": "Get max delay (buffer size)."
        },
        {
          "member function": "set",
          "return type": "void",
          "arguments": [
            {
              "type": "dur",
              "name": "delay"
            },
            {
              "type": "dur",
              "name": "max"
            }
          ],
          "description": "Set delay length and delay max; delay should be <= max."
        }
      ]
    },
    {
      "name": "Echo",
      "description": "An echo effect. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
      "inherits": ["UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/basic/echo.ck",
        "https://chuck.stanford.edu/doc/examples/stk/rhodey.ck",
        "https://chuck.stanford.edu/doc/examples/stk/wurley2.ck"
      ],
      "constructors": [
        {
          "constructor": "Echo",
          "arguments": [],
          "description": "Default constructor for Echo."
        },
        {
          "constructor": "Echo",
          "arguments": [
            {
              "type": "dur",
              "name": "delay"
            }
          ],
          "description": "Construct an Echo with delay length and, implicitly, delay max."
        },
        {
          "constructor": "Echo",
          "arguments": [
            {
              "type": "dur",
              "name": "delay"
            },
            {
              "type": "dur",
              "name": "max"
            }
          ],
          "description": "Construct an Echo with delay length and delay max."
        }
      ],
      "member functions": [
        {
          "member function": "delay",
          "return type": "dur",
          "arguments": [
            {
              "type": "dur",
              "name": "value"
            }
          ],
          "description": "Set length of echo."
        },
        {
          "member function": "delay",
          "return type": "dur",
          "arguments": [],
          "description": "Get length of echo."
        },
        {
          "member function": "max",
          "return type": "dur",
          "arguments": [
            {
              "type": "dur",
              "name": "value"
            }
          ],
          "description": "Set max delay (buffer size)."
        },
        {
          "member function": "max",
          "return type": "dur",
          "arguments": [],
          "description": "Get max delay (buffer size)."
        },
        {
          "member function": "mix",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "value"
            }
          ],
          "description": "Set mix level (wet/dry)."
        },
        {
          "member function": "mix",
          "return type": "float",
          "arguments": [],
          "description": "Get mix level (wet/dry)."
        },
        {
          "member function": "set",
          "return type": "void",
          "arguments": [
            {
              "type": "dur",
              "name": "delay"
            },
            {
              "type": "dur",
              "name": "max"
            }
          ],
          "description": "Set delay length and delay max; delay should be <= max."
        }
      ]
    },
    {
      "name": "Noise",
      "description": "A white noise generator.",
      "inherits": ["UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/basic/wind.ck",
        "https://chuck.stanford.edu/doc/examples/deep/smb.ck",
        "https://chuck.stanford.edu/doc/examples/shred/powerup.ck"
      ]
    },
    {
      "name": "CNoise",
      "description": "A noise generator with multiple noise synthesis modes.",
      "inherits": ["UGen", "Object"],
      "constructors": [
        {
          "constructor": "CNoise",
          "arguments": [],
          "description": "Default constructor for CNoise."
        },
        {
          "constructor": "CNoise",
          "arguments": [
            {
              "type": "string",
              "name": "mode"
            }
          ],
          "description": "Construct a CNoise with synthesis mode. Supported modes are \"white\", \"pink\", \"flip\", and \"xor\"."
        }
      ],
      "member functions": [
        {
          "member function": "fprob",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "fprob"
            }
          ],
          "description": "Probability [0-1] used for calculating XOR noise."
        },
        {
          "member function": "mode",
          "return type": "string",
          "arguments": [
            {
              "type": "string",
              "name": "mode"
            }
          ],
          "description": "Noise synthesis mode. Supported modes are \"white\", \"pink\", \"flip\", and \"xor\"."
        }
      ]
    },
    {
      "name": "Osc",
      "description": "Base class for simple oscillator unit generators.",
      "inherits": ["UGen", "Object"],
      "constructors": [
        {
          "constructor": "Osc",
          "arguments": [],
          "description": "Default constructor for Osc."
        },
        {
          "constructor": "Osc",
          "arguments": [
            {
              "type": "float",
              "name": "freq"
            }
          ],
          "description": "Construct Osc at specified frequency."
        },
        {
          "constructor": "Osc",
          "arguments": [
            {
              "type": "float",
              "name": "freq"
            },
            {
              "type": "float",
              "name": "phase"
            }
          ],
          "description": "Construct Osc at specified frequency and phase."
        }
      ],
      "member functions": [
        {
          "member function": "freq",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "hz"
            }
          ],
          "description": "Set frequency of oscillator in Hertz; maintains phase."
        },
        {
          "member function": "freq",
          "return type": "float",
          "arguments": [],
          "description": "Get frequency of oscillator in Hertz."
        },
        {
          "member function": "period",
          "return type": "dur",
          "arguments": [
            {
              "type": "dur",
              "name": "value"
            }
          ],
          "description": "Set period of oscillator (inverse of frequency)."
        },
        {
          "member function": "period",
          "return type": "dur",
          "arguments": [],
          "description": "Get period of oscillator (inverse of frequency)."
        },
        {
          "member function": "phase",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "phase"
            }
          ],
          "description": "Set oscillator phase, in range [0,1)."
        },
        {
          "member function": "phase",
          "return type": "float",
          "arguments": [],
          "description": "Get oscillator phase, in range [0,1)."
        },
        {
          "member function": "sfreq",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "hz"
            }
          ],
          "description": "Set frequency of oscillator in Hertz; resets phase to 0."
        },
        {
          "member function": "sync",
          "return type": "int",
          "arguments": [
            {
              "type": "int",
              "name": "type"
            }
          ],
          "description": "Choose how to interpret input: (0) sync frequency to input; (1) sync phase to input; (2) frequency modulation (add input to internal frequency)."
        },
        {
          "member function": "sync",
          "return type": "int",
          "arguments": [],
          "description": "Get current interpretation of input: (0) sync frequency to input; (1) sync phase to input; (2) frequency modulation (add input to internal frequency)."
        }
      ]
    },
    {
      "name": "SinOsc",
      "description": "A sine wave oscillator.",
      "inherits": ["Osc", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/otf_05.ck",
        "https://chuck.stanford.edu/doc/examples/otf_06.ck",
        "https://chuck.stanford.edu/doc/examples/basic/foo.ck",
        "https://chuck.stanford.edu/doc/examples/basic/bar.ck",
        "https://chuck.stanford.edu/doc/examples/basic/chirp.ck",
        "https://chuck.stanford.edu/doc/examples/basic/alarm.ck",
        "https://chuck.stanford.edu/doc/examples/basic/whirl.ck",
        "https://chuck.stanford.edu/doc/examples/analysis/fft.ck"
      ],
      "constructors": [
        {
          "constructor": "SinOsc",
          "arguments": [],
          "description": "Default constructor for SinOsc."
        },
        {
          "constructor": "SinOsc",
          "arguments": [
            {
              "type": "float",
              "name": "freq"
            }
          ],
          "description": "Construct SinOsc at specified frequency."
        },
        {
          "constructor": "SinOsc",
          "arguments": [
            {
              "type": "float",
              "name": "freq"
            },
            {
              "type": "float",
              "name": "phase"
            }
          ],
          "description": "Construct SinOsc at specified frequency and phase."
        }
      ]
    },
    {
      "name": "TriOsc",
      "description": "A triangle wave oscillator.",
      "inherits": ["Osc", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/basic/oscillatronx.ck",
        "https://chuck.stanford.edu/doc/examples/deep/shepard.ck",
        "https://chuck.stanford.edu/doc/examples/deep/smb.ck"
      ],
      "constructors": [
        {
          "constructor": "TriOsc",
          "arguments": [],
          "description": "Default constructor for TriOsc."
        },
        {
          "constructor": "TriOsc",
          "arguments": [
            {
              "type": "float",
              "name": "freq"
            }
          ],
          "description": "Construct TriOsc at specified frequency."
        },
        {
          "constructor": "TriOsc",
          "arguments": [
            {
              "type": "float",
              "name": "freq"
            },
            {
              "type": "float",
              "name": "phase"
            }
          ],
          "description": "Construct TriOsc at specified frequency and phase."
        }
      ],
      "member functions": [
        {
          "member function": "width",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "width"
            }
          ],
          "description": "Set width of triangle wave (ratio of rise time to fall time)."
        },
        {
          "member function": "width",
          "return type": "float",
          "arguments": [],
          "description": "Get width of triangle wave (ratio of rise time to fall time)."
        }
      ]
    },
    {
      "name": "SawOsc",
      "description": "Sawtooth wave oscillator.",
      "inherits": ["TriOsc", "Osc", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/deep/thx.ck",
        "https://chuck.stanford.edu/doc/examples/basic/oscillatronx.ck"
      ],
      "constructors": [
        {
          "constructor": "SawOsc",
          "arguments": [],
          "description": "Default constructor for SawOsc."
        },
        {
          "constructor": "SawOsc",
          "arguments": [
            {
              "type": "float",
              "name": "freq"
            }
          ],
          "description": "Construct SawOsc at specified frequency."
        },
        {
          "constructor": "SawOsc",
          "arguments": [
            {
              "type": "float",
              "name": "freq"
            },
            {
              "type": "float",
              "name": "phase"
            }
          ],
          "description": "Construct SawOsc at specified frequency and phase."
        }
      ],
      "member functions": [
        {
          "member function": "width",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "width"
            }
          ],
          "description": "Whether sawtooth wave is to fall (0) or rise (1)."
        },
        {
          "member function": "width",
          "return type": "float",
          "arguments": [],
          "description": "Whether sawtooth wave is to fall (0) or rise (1)."
        }
      ]
    },
    {
      "name": "PulseOsc",
      "description": "A pulse width oscillator.",
      "inherits": ["Osc", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/basic/pulse.ck"
      ],
      "constructors": [
        {
          "constructor": "PulseOsc",
          "arguments": [],
          "description": "Default constructor for PulseOsc."
        },
        {
          "constructor": "PulseOsc",
          "arguments": [
            {
              "type": "float",
              "name": "freq"
            }
          ],
          "description": "Construct PulseOsc at specified frequency."
        },
        {
          "constructor": "PulseOsc",
          "arguments": [
            {
              "type": "float",
              "name": "freq"
            },
            {
              "type": "float",
              "name": "phase"
            }
          ],
          "description": "Construct PulseOsc at specified frequency and phase."
        }
      ],
      "member functions": [
        {
          "member function": "width",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "width"
            }
          ],
          "description": "Set width of duty cycle [0,1)."
        },
        {
          "member function": "width",
          "return type": "float",
          "arguments": [],
          "description": "Get width of duty cycle [0,1)/."
        }
      ]
    },
    {
      "name": "SqrOsc",
      "description": "A square wave oscillator (same as PulseOsc with 0.5 duty cycle).",
      "inherits": ["PulseOsc", "Osc", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/basic/oscillatronx.ck",
        "https://chuck.stanford.edu/doc/examples/deep/smb.ck",
        "https://chuck.stanford.edu/doc/examples/filter/brf.ck",
        "https://chuck.stanford.edu/doc/examples/filter/rlpf.ck",
        "https://chuck.stanford.edu/doc/examples/filter/rhpf.ck"
      ],
      "constructors": [
        {
          "constructor": "SqrOsc",
          "arguments": [],
          "description": "Default constructor for SqrOsc."
        },
        {
          "constructor": "SqrOsc",
          "arguments": [
            {
              "type": "float",
              "name": "freq"
            }
          ],
          "description": "Construct SqrOsc at specified frequency."
        },
        {
          "constructor": "SqrOsc",
          "arguments": [
            {
              "type": "float",
              "name": "freq"
            },
            {
              "type": "float",
              "name": "phase"
            }
          ],
          "description": "Construct SqrOsc at specified frequency and phase."
        }
      ],
      "member functions": [
        {
          "member function": "width",
          "return type": "float",
          "arguments": [],
          "description": "Set width of duty cycle (always 0.5)."
        }
      ]
    },
    {
      "name": "Phasor",
      "description": "A phasor oscillator; linearly rises from 0 to 1; can be used as a phase control.",
      "inherits": ["Osc", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/basic/phasor.ck"
      ],
      "constructors": [
        {
          "constructor": "Phasor",
          "arguments": [],
          "description": "Default constructor for Phasor."
        },
        {
          "constructor": "Phasor",
          "arguments": [
            {
              "type": "float",
              "name": "freq"
            }
          ],
          "description": "Construct Phasor at specified frequency."
        },
        {
          "constructor": "Phasor",
          "arguments": [
            {
              "type": "float",
              "name": "freq"
            },
            {
              "type": "float",
              "name": "phase"
            }
          ],
          "description": "Construct Phasor at specified frequency and phase."
        }
      ]
    },
    {
      "name": "HalfRect",
      "description": "A half wave rectifier.",
      "inherits": ["UGen", "Object"]
    },
    {
      "name": "FullRect",
      "description": "A full wave rectifier.",
      "inherits": ["UGen", "Object"]
    },
    {
      "name": "Chugraph",
      "description": "Base class for subgraph-based user-created in-language unit generators.",
      "inherits": ["UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/extend/chugraph.ck",
        "https://chuck.stanford.edu/doc/examples/class/dinky.ck",
        "https://chuck.stanford.edu/doc/examples/class/try.ck",
        "https://chuck.stanford.edu/doc/examples/deep/ks-chord.ck"
      ],
      "constructors": [
        {
          "constructor": "Chugraph",
          "arguments": [],
          "description": "Default constructor for Chugraph."
        }
      ],
      "member variables": [
        {
          "name": "inlet",
          "type": "UGen",
          "description": "Terminal for sources chucked into this ugen."
        },
        {
          "name": "outlet",
          "type": "UGen",
          "description": "Terminal for the output of this ugen."
        }
      ]
    },
    {
      "name": "Chugen",
      "description": "Base class for user-created in-language unit generators.",
      "inherits": ["UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/extend/chugen.ck"
      ],
      "constructors": [
        {
          "constructor": "Chugen",
          "arguments": [],
          "description": "Default constructor for Chugen."
        }
      ]
    },
    {
      "name": "UGen_Multi",
      "description": "Base class for multi-channel unit generators.",
      "inherits": ["UGen", "Object"],
      "constructors": [
        {
          "constructor": "UGen_Multi",
          "arguments": [],
          "description": "Default constructor for UGen_Multi."
        }
      ],
      "member functions": [
        {
          "member function": "chan",
          "return type": "UGen",
          "arguments": [
            {
              "type": "int",
              "name": "which"
            }
          ],
          "description": "Get UGen representing a specific channel of this UGen, or null if no such channel is available."
        }
      ]
    },
    {
      "name": "UGen_Stereo",
      "description": "Base class for stereo unit generators.",
      "inherits": ["UGen_Multi", "UGen", "Object"],
      "constructors": [
        {
          "constructor": "UGen_Stereo",
          "arguments": [],
          "description": "Default constructor for UGen_Stereo."
        }
      ],
      "member functions": [
        {
          "member function": "pan",
          "return type": "float",
          "arguments": [
            {
              "type": "float",
              "name": "val"
            }
          ],
          "description": "Pan between left and right channels, in range [-1,1], with -1 being far-left, 1 far-right, and 0 centered."
        },
        {
          "member function": "pan",
          "return type": "float",
          "arguments": [],
          "description": "Pan between left and right channels, in range [-1,1], with -1 being far-left, 1 far-right, and 0 centered."
        },
        {
          "member function": "panType",
          "return type": "int",
          "arguments": [
            {
              "type": "int",
              "name": "val"
            }
          ],
          "description": "Set the panning type: (1) constant power panning, (0) unity gain anti-panning."
        },
        {
          "member function": "panType",
          "return type": "int",
          "arguments": [],
          "description": "Get the panning type: (1) constant power panning, (0) unity gain anti-panning."
        }
      ],
      "member variables": [
        {
          "name": "left",
          "type": "UGen",
          "description": "Left channel (same as .chan(0))."
        },
        {
          "name": "right",
          "type": "UGen",
          "description": "Right channel (same as .chan(1))."
        }
      ]
    },
    {
      "name": "Mix2",
      "description": "A stereo-to-mono unit generator for mixing stereo signal to mono.",
      "inherits": ["UGen_Stereo", "UGen_Multi", "UGen", "Object"],
      "constructors": [
        {
          "constructor": "Mix2",
          "arguments": [],
          "description": "Default constructor for Mix2."
        }
      ]
    },
    {
      "name": "Pan2",
      "description": "A mono-to-stereo unit generator for stereo panning.",
      "inherits": ["UGen_Stereo", "UGen_Multi", "UGen", "Object"],
      "examples": [
        "https://chuck.stanford.edu/doc/examples/basic/chirp2.ck",
        "https://chuck.stanford.edu/doc/examples/stereo/array.ck",
        "https://chuck.stanford.edu/doc/examples/stereo/powerup2.ck",
        "https://chuck.stanford.edu/doc/examples/stereo/moe2.ck",
        "https://chuck.stanford.edu/doc/examples/stereo/larry2.ck",
        "https://chuck.stanford.edu/doc/examples/stereo/curly2.ck",
        "https://chuck.stanford.edu/doc/examples/stereo/ugen-array.ck",
        "https://chuck.stanford.edu/doc/examples/stereo/stereo-noise.ck",
        "https://chuck.stanford.edu/doc/examples/stk/honkeytonk-algo1.ck",
        "https://chuck.stanford.edu/doc/examples/hanoi++.ck",
        "https://chuck.stanford.edu/doc/examples/hanoi2.ck",
        "https://chuck.stanford.edu/doc/examples/hanoi3.ck"
      ],
      "constructors": [
        {
          "constructor": "Pan2",
          "arguments": [],
          "description": "Default constructor for Pan2."
        }
      ]
    }
  ]
}
